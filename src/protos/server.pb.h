// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2eproto;
namespace grpc {
namespace wabbywabbo {
namespace dbserver {
class GetMasterRequest;
class GetMasterRequestDefaultTypeInternal;
extern GetMasterRequestDefaultTypeInternal _GetMasterRequest_default_instance_;
class GetMasterResponse;
class GetMasterResponseDefaultTypeInternal;
extern GetMasterResponseDefaultTypeInternal _GetMasterResponse_default_instance_;
class GetShardDataRequest;
class GetShardDataRequestDefaultTypeInternal;
extern GetShardDataRequestDefaultTypeInternal _GetShardDataRequest_default_instance_;
class GetShardDataResponse;
class GetShardDataResponseDefaultTypeInternal;
extern GetShardDataResponseDefaultTypeInternal _GetShardDataResponse_default_instance_;
class RequsestRecord;
class RequsestRecordDefaultTypeInternal;
extern RequsestRecordDefaultTypeInternal _RequsestRecord_default_instance_;
class ResponseRecord;
class ResponseRecordDefaultTypeInternal;
extern ResponseRecordDefaultTypeInternal _ResponseRecord_default_instance_;
class SetShardDataRequest;
class SetShardDataRequestDefaultTypeInternal;
extern SetShardDataRequestDefaultTypeInternal _SetShardDataRequest_default_instance_;
class SetShardDataResponse;
class SetShardDataResponseDefaultTypeInternal;
extern SetShardDataResponseDefaultTypeInternal _SetShardDataResponse_default_instance_;
}  // namespace dbserver
}  // namespace wabbywabbo
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::grpc::wabbywabbo::dbserver::GetMasterRequest* Arena::CreateMaybeMessage<::grpc::wabbywabbo::dbserver::GetMasterRequest>(Arena*);
template<> ::grpc::wabbywabbo::dbserver::GetMasterResponse* Arena::CreateMaybeMessage<::grpc::wabbywabbo::dbserver::GetMasterResponse>(Arena*);
template<> ::grpc::wabbywabbo::dbserver::GetShardDataRequest* Arena::CreateMaybeMessage<::grpc::wabbywabbo::dbserver::GetShardDataRequest>(Arena*);
template<> ::grpc::wabbywabbo::dbserver::GetShardDataResponse* Arena::CreateMaybeMessage<::grpc::wabbywabbo::dbserver::GetShardDataResponse>(Arena*);
template<> ::grpc::wabbywabbo::dbserver::RequsestRecord* Arena::CreateMaybeMessage<::grpc::wabbywabbo::dbserver::RequsestRecord>(Arena*);
template<> ::grpc::wabbywabbo::dbserver::ResponseRecord* Arena::CreateMaybeMessage<::grpc::wabbywabbo::dbserver::ResponseRecord>(Arena*);
template<> ::grpc::wabbywabbo::dbserver::SetShardDataRequest* Arena::CreateMaybeMessage<::grpc::wabbywabbo::dbserver::SetShardDataRequest>(Arena*);
template<> ::grpc::wabbywabbo::dbserver::SetShardDataResponse* Arena::CreateMaybeMessage<::grpc::wabbywabbo::dbserver::SetShardDataResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpc {
namespace wabbywabbo {
namespace dbserver {

enum Status : int {
  OK = 0,
  ERROR_NOT_FOUND = 1,
  ERROR_SHARD_INVALID = 2,
  ERROR_UNKNOWN = 9999,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = OK;
constexpr Status Status_MAX = ERROR_UNKNOWN;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum RecordType : int {
  SET = 0,
  DEL = 1,
  RecordType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RecordType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RecordType_IsValid(int value);
constexpr RecordType RecordType_MIN = SET;
constexpr RecordType RecordType_MAX = DEL;
constexpr int RecordType_ARRAYSIZE = RecordType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordType_descriptor();
template<typename T>
inline const std::string& RecordType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecordType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecordType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecordType_descriptor(), enum_t_value);
}
inline bool RecordType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecordType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecordType>(
    RecordType_descriptor(), name, value);
}
// ===================================================================

class GetMasterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.wabbywabbo.dbserver.GetMasterRequest) */ {
 public:
  inline GetMasterRequest() : GetMasterRequest(nullptr) {}
  virtual ~GetMasterRequest();

  GetMasterRequest(const GetMasterRequest& from);
  GetMasterRequest(GetMasterRequest&& from) noexcept
    : GetMasterRequest() {
    *this = ::std::move(from);
  }

  inline GetMasterRequest& operator=(const GetMasterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMasterRequest& operator=(GetMasterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMasterRequest& default_instance();

  static inline const GetMasterRequest* internal_default_instance() {
    return reinterpret_cast<const GetMasterRequest*>(
               &_GetMasterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetMasterRequest& a, GetMasterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMasterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMasterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMasterRequest* New() const final {
    return CreateMaybeMessage<GetMasterRequest>(nullptr);
  }

  GetMasterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMasterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMasterRequest& from);
  void MergeFrom(const GetMasterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMasterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.wabbywabbo.dbserver.GetMasterRequest";
  }
  protected:
  explicit GetMasterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.wabbywabbo.dbserver.GetMasterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class GetMasterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.wabbywabbo.dbserver.GetMasterResponse) */ {
 public:
  inline GetMasterResponse() : GetMasterResponse(nullptr) {}
  virtual ~GetMasterResponse();

  GetMasterResponse(const GetMasterResponse& from);
  GetMasterResponse(GetMasterResponse&& from) noexcept
    : GetMasterResponse() {
    *this = ::std::move(from);
  }

  inline GetMasterResponse& operator=(const GetMasterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMasterResponse& operator=(GetMasterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMasterResponse& default_instance();

  static inline const GetMasterResponse* internal_default_instance() {
    return reinterpret_cast<const GetMasterResponse*>(
               &_GetMasterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetMasterResponse& a, GetMasterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMasterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMasterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMasterResponse* New() const final {
    return CreateMaybeMessage<GetMasterResponse>(nullptr);
  }

  GetMasterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMasterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMasterResponse& from);
  void MergeFrom(const GetMasterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMasterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.wabbywabbo.dbserver.GetMasterResponse";
  }
  protected:
  explicit GetMasterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated int32 db_id = 2;
  int db_id_size() const;
  private:
  int _internal_db_id_size() const;
  public:
  void clear_db_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_db_id() const;
  void _internal_add_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_db_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 db_id(int index) const;
  void set_db_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      db_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_db_id();

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.wabbywabbo.dbserver.GetMasterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > db_id_;
  mutable std::atomic<int> _db_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class RequsestRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.wabbywabbo.dbserver.RequsestRecord) */ {
 public:
  inline RequsestRecord() : RequsestRecord(nullptr) {}
  virtual ~RequsestRecord();

  RequsestRecord(const RequsestRecord& from);
  RequsestRecord(RequsestRecord&& from) noexcept
    : RequsestRecord() {
    *this = ::std::move(from);
  }

  inline RequsestRecord& operator=(const RequsestRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequsestRecord& operator=(RequsestRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequsestRecord& default_instance();

  static inline const RequsestRecord* internal_default_instance() {
    return reinterpret_cast<const RequsestRecord*>(
               &_RequsestRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequsestRecord& a, RequsestRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(RequsestRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequsestRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequsestRecord* New() const final {
    return CreateMaybeMessage<RequsestRecord>(nullptr);
  }

  RequsestRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequsestRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequsestRecord& from);
  void MergeFrom(const RequsestRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequsestRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.wabbywabbo.dbserver.RequsestRecord";
  }
  protected:
  explicit RequsestRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kShardFieldNumber = 1,
    kRecordTypeFieldNumber = 5,
    kTtlFieldNumber = 4,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 shard = 1;
  void clear_shard();
  ::PROTOBUF_NAMESPACE_ID::int32 shard() const;
  void set_shard(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard() const;
  void _internal_set_shard(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .grpc.wabbywabbo.dbserver.RecordType record_type = 5;
  bool has_record_type() const;
  private:
  bool _internal_has_record_type() const;
  public:
  void clear_record_type();
  ::grpc::wabbywabbo::dbserver::RecordType record_type() const;
  void set_record_type(::grpc::wabbywabbo::dbserver::RecordType value);
  private:
  ::grpc::wabbywabbo::dbserver::RecordType _internal_record_type() const;
  void _internal_set_record_type(::grpc::wabbywabbo::dbserver::RecordType value);
  public:

  // int64 ttl = 4;
  bool has_ttl() const;
  private:
  bool _internal_has_ttl() const;
  public:
  void clear_ttl();
  ::PROTOBUF_NAMESPACE_ID::int64 ttl() const;
  void set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ttl() const;
  void _internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.wabbywabbo.dbserver.RequsestRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 shard_;
  int record_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 ttl_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ResponseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.wabbywabbo.dbserver.ResponseRecord) */ {
 public:
  inline ResponseRecord() : ResponseRecord(nullptr) {}
  virtual ~ResponseRecord();

  ResponseRecord(const ResponseRecord& from);
  ResponseRecord(ResponseRecord&& from) noexcept
    : ResponseRecord() {
    *this = ::std::move(from);
  }

  inline ResponseRecord& operator=(const ResponseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseRecord& operator=(ResponseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseRecord& default_instance();

  static inline const ResponseRecord* internal_default_instance() {
    return reinterpret_cast<const ResponseRecord*>(
               &_ResponseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseRecord& a, ResponseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseRecord* New() const final {
    return CreateMaybeMessage<ResponseRecord>(nullptr);
  }

  ResponseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseRecord& from);
  void MergeFrom(const ResponseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.wabbywabbo.dbserver.ResponseRecord";
  }
  protected:
  explicit ResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kTtlFieldNumber = 3,
    kIsDeleteFieldNumber = 4,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 ttl = 3;
  void clear_ttl();
  ::PROTOBUF_NAMESPACE_ID::int64 ttl() const;
  void set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ttl() const;
  void _internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_delete = 4;
  bool has_is_delete() const;
  private:
  bool _internal_has_is_delete() const;
  public:
  void clear_is_delete();
  bool is_delete() const;
  void set_is_delete(bool value);
  private:
  bool _internal_is_delete() const;
  void _internal_set_is_delete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.wabbywabbo.dbserver.ResponseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 ttl_;
  bool is_delete_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class GetShardDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.wabbywabbo.dbserver.GetShardDataRequest) */ {
 public:
  inline GetShardDataRequest() : GetShardDataRequest(nullptr) {}
  virtual ~GetShardDataRequest();

  GetShardDataRequest(const GetShardDataRequest& from);
  GetShardDataRequest(GetShardDataRequest&& from) noexcept
    : GetShardDataRequest() {
    *this = ::std::move(from);
  }

  inline GetShardDataRequest& operator=(const GetShardDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetShardDataRequest& operator=(GetShardDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetShardDataRequest& default_instance();

  static inline const GetShardDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetShardDataRequest*>(
               &_GetShardDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetShardDataRequest& a, GetShardDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetShardDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetShardDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetShardDataRequest* New() const final {
    return CreateMaybeMessage<GetShardDataRequest>(nullptr);
  }

  GetShardDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetShardDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetShardDataRequest& from);
  void MergeFrom(const GetShardDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetShardDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.wabbywabbo.dbserver.GetShardDataRequest";
  }
  protected:
  explicit GetShardDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
  };
  // .grpc.wabbywabbo.dbserver.RequsestRecord record = 1;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::grpc::wabbywabbo::dbserver::RequsestRecord& record() const;
  ::grpc::wabbywabbo::dbserver::RequsestRecord* release_record();
  ::grpc::wabbywabbo::dbserver::RequsestRecord* mutable_record();
  void set_allocated_record(::grpc::wabbywabbo::dbserver::RequsestRecord* record);
  private:
  const ::grpc::wabbywabbo::dbserver::RequsestRecord& _internal_record() const;
  ::grpc::wabbywabbo::dbserver::RequsestRecord* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::grpc::wabbywabbo::dbserver::RequsestRecord* record);
  ::grpc::wabbywabbo::dbserver::RequsestRecord* unsafe_arena_release_record();

  // @@protoc_insertion_point(class_scope:grpc.wabbywabbo.dbserver.GetShardDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc::wabbywabbo::dbserver::RequsestRecord* record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class GetShardDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.wabbywabbo.dbserver.GetShardDataResponse) */ {
 public:
  inline GetShardDataResponse() : GetShardDataResponse(nullptr) {}
  virtual ~GetShardDataResponse();

  GetShardDataResponse(const GetShardDataResponse& from);
  GetShardDataResponse(GetShardDataResponse&& from) noexcept
    : GetShardDataResponse() {
    *this = ::std::move(from);
  }

  inline GetShardDataResponse& operator=(const GetShardDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetShardDataResponse& operator=(GetShardDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetShardDataResponse& default_instance();

  static inline const GetShardDataResponse* internal_default_instance() {
    return reinterpret_cast<const GetShardDataResponse*>(
               &_GetShardDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetShardDataResponse& a, GetShardDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetShardDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetShardDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetShardDataResponse* New() const final {
    return CreateMaybeMessage<GetShardDataResponse>(nullptr);
  }

  GetShardDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetShardDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetShardDataResponse& from);
  void MergeFrom(const GetShardDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetShardDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.wabbywabbo.dbserver.GetShardDataResponse";
  }
  protected:
  explicit GetShardDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // .grpc.wabbywabbo.dbserver.ResponseRecord record = 2;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::grpc::wabbywabbo::dbserver::ResponseRecord& record() const;
  ::grpc::wabbywabbo::dbserver::ResponseRecord* release_record();
  ::grpc::wabbywabbo::dbserver::ResponseRecord* mutable_record();
  void set_allocated_record(::grpc::wabbywabbo::dbserver::ResponseRecord* record);
  private:
  const ::grpc::wabbywabbo::dbserver::ResponseRecord& _internal_record() const;
  ::grpc::wabbywabbo::dbserver::ResponseRecord* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::grpc::wabbywabbo::dbserver::ResponseRecord* record);
  ::grpc::wabbywabbo::dbserver::ResponseRecord* unsafe_arena_release_record();

  // .grpc.wabbywabbo.dbserver.Status status = 1;
  void clear_status();
  ::grpc::wabbywabbo::dbserver::Status status() const;
  void set_status(::grpc::wabbywabbo::dbserver::Status value);
  private:
  ::grpc::wabbywabbo::dbserver::Status _internal_status() const;
  void _internal_set_status(::grpc::wabbywabbo::dbserver::Status value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.wabbywabbo.dbserver.GetShardDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc::wabbywabbo::dbserver::ResponseRecord* record_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class SetShardDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.wabbywabbo.dbserver.SetShardDataRequest) */ {
 public:
  inline SetShardDataRequest() : SetShardDataRequest(nullptr) {}
  virtual ~SetShardDataRequest();

  SetShardDataRequest(const SetShardDataRequest& from);
  SetShardDataRequest(SetShardDataRequest&& from) noexcept
    : SetShardDataRequest() {
    *this = ::std::move(from);
  }

  inline SetShardDataRequest& operator=(const SetShardDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetShardDataRequest& operator=(SetShardDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetShardDataRequest& default_instance();

  static inline const SetShardDataRequest* internal_default_instance() {
    return reinterpret_cast<const SetShardDataRequest*>(
               &_SetShardDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetShardDataRequest& a, SetShardDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetShardDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetShardDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetShardDataRequest* New() const final {
    return CreateMaybeMessage<SetShardDataRequest>(nullptr);
  }

  SetShardDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetShardDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetShardDataRequest& from);
  void MergeFrom(const SetShardDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetShardDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.wabbywabbo.dbserver.SetShardDataRequest";
  }
  protected:
  explicit SetShardDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
  };
  // .grpc.wabbywabbo.dbserver.RequsestRecord record = 1;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::grpc::wabbywabbo::dbserver::RequsestRecord& record() const;
  ::grpc::wabbywabbo::dbserver::RequsestRecord* release_record();
  ::grpc::wabbywabbo::dbserver::RequsestRecord* mutable_record();
  void set_allocated_record(::grpc::wabbywabbo::dbserver::RequsestRecord* record);
  private:
  const ::grpc::wabbywabbo::dbserver::RequsestRecord& _internal_record() const;
  ::grpc::wabbywabbo::dbserver::RequsestRecord* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::grpc::wabbywabbo::dbserver::RequsestRecord* record);
  ::grpc::wabbywabbo::dbserver::RequsestRecord* unsafe_arena_release_record();

  // @@protoc_insertion_point(class_scope:grpc.wabbywabbo.dbserver.SetShardDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc::wabbywabbo::dbserver::RequsestRecord* record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class SetShardDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpc.wabbywabbo.dbserver.SetShardDataResponse) */ {
 public:
  inline SetShardDataResponse() : SetShardDataResponse(nullptr) {}
  virtual ~SetShardDataResponse();

  SetShardDataResponse(const SetShardDataResponse& from);
  SetShardDataResponse(SetShardDataResponse&& from) noexcept
    : SetShardDataResponse() {
    *this = ::std::move(from);
  }

  inline SetShardDataResponse& operator=(const SetShardDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetShardDataResponse& operator=(SetShardDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetShardDataResponse& default_instance();

  static inline const SetShardDataResponse* internal_default_instance() {
    return reinterpret_cast<const SetShardDataResponse*>(
               &_SetShardDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetShardDataResponse& a, SetShardDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetShardDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetShardDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetShardDataResponse* New() const final {
    return CreateMaybeMessage<SetShardDataResponse>(nullptr);
  }

  SetShardDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetShardDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetShardDataResponse& from);
  void MergeFrom(const SetShardDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetShardDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpc.wabbywabbo.dbserver.SetShardDataResponse";
  }
  protected:
  explicit SetShardDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_2eproto);
    return ::descriptor_table_server_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 3,
    kStatusFieldNumber = 1,
    kOldStrExistsFieldNumber = 2,
  };
  // .grpc.wabbywabbo.dbserver.ResponseRecord record = 3;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::grpc::wabbywabbo::dbserver::ResponseRecord& record() const;
  ::grpc::wabbywabbo::dbserver::ResponseRecord* release_record();
  ::grpc::wabbywabbo::dbserver::ResponseRecord* mutable_record();
  void set_allocated_record(::grpc::wabbywabbo::dbserver::ResponseRecord* record);
  private:
  const ::grpc::wabbywabbo::dbserver::ResponseRecord& _internal_record() const;
  ::grpc::wabbywabbo::dbserver::ResponseRecord* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::grpc::wabbywabbo::dbserver::ResponseRecord* record);
  ::grpc::wabbywabbo::dbserver::ResponseRecord* unsafe_arena_release_record();

  // .grpc.wabbywabbo.dbserver.Status status = 1;
  void clear_status();
  ::grpc::wabbywabbo::dbserver::Status status() const;
  void set_status(::grpc::wabbywabbo::dbserver::Status value);
  private:
  ::grpc::wabbywabbo::dbserver::Status _internal_status() const;
  void _internal_set_status(::grpc::wabbywabbo::dbserver::Status value);
  public:

  // bool old_str_exists = 2;
  void clear_old_str_exists();
  bool old_str_exists() const;
  void set_old_str_exists(bool value);
  private:
  bool _internal_old_str_exists() const;
  void _internal_set_old_str_exists(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpc.wabbywabbo.dbserver.SetShardDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::grpc::wabbywabbo::dbserver::ResponseRecord* record_;
  int status_;
  bool old_str_exists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// ===================================================================

class DbService_Stub;

class DbService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DbService() {};
 public:
  virtual ~DbService();

  typedef DbService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetMasterShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::grpc::wabbywabbo::dbserver::GetMasterRequest* request,
                       ::grpc::wabbywabbo::dbserver::GetMasterResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::grpc::wabbywabbo::dbserver::GetShardDataRequest* request,
                       ::grpc::wabbywabbo::dbserver::GetShardDataResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetString(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::grpc::wabbywabbo::dbserver::SetShardDataRequest* request,
                       ::grpc::wabbywabbo::dbserver::SetShardDataResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DbService);
};

class DbService_Stub : public DbService {
 public:
  DbService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  DbService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~DbService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements DbService ------------------------------------------

  void GetMasterShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::grpc::wabbywabbo::dbserver::GetMasterRequest* request,
                       ::grpc::wabbywabbo::dbserver::GetMasterResponse* response,
                       ::google::protobuf::Closure* done);
  void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::grpc::wabbywabbo::dbserver::GetShardDataRequest* request,
                       ::grpc::wabbywabbo::dbserver::GetShardDataResponse* response,
                       ::google::protobuf::Closure* done);
  void SetString(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::grpc::wabbywabbo::dbserver::SetShardDataRequest* request,
                       ::grpc::wabbywabbo::dbserver::SetShardDataResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DbService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetMasterRequest

// int32 status = 1;
inline void GetMasterRequest::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMasterRequest::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMasterRequest::status() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.GetMasterRequest.status)
  return _internal_status();
}
inline void GetMasterRequest::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void GetMasterRequest::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.GetMasterRequest.status)
}

// -------------------------------------------------------------------

// GetMasterResponse

// int32 status = 1;
inline void GetMasterResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMasterResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMasterResponse::status() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.GetMasterResponse.status)
  return _internal_status();
}
inline void GetMasterResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void GetMasterResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.GetMasterResponse.status)
}

// repeated int32 db_id = 2;
inline int GetMasterResponse::_internal_db_id_size() const {
  return db_id_.size();
}
inline int GetMasterResponse::db_id_size() const {
  return _internal_db_id_size();
}
inline void GetMasterResponse::clear_db_id() {
  db_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMasterResponse::_internal_db_id(int index) const {
  return db_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMasterResponse::db_id(int index) const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.GetMasterResponse.db_id)
  return _internal_db_id(index);
}
inline void GetMasterResponse::set_db_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  db_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.GetMasterResponse.db_id)
}
inline void GetMasterResponse::_internal_add_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  db_id_.Add(value);
}
inline void GetMasterResponse::add_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_db_id(value);
  // @@protoc_insertion_point(field_add:grpc.wabbywabbo.dbserver.GetMasterResponse.db_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetMasterResponse::_internal_db_id() const {
  return db_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetMasterResponse::db_id() const {
  // @@protoc_insertion_point(field_list:grpc.wabbywabbo.dbserver.GetMasterResponse.db_id)
  return _internal_db_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetMasterResponse::_internal_mutable_db_id() {
  return &db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetMasterResponse::mutable_db_id() {
  // @@protoc_insertion_point(field_mutable_list:grpc.wabbywabbo.dbserver.GetMasterResponse.db_id)
  return _internal_mutable_db_id();
}

// -------------------------------------------------------------------

// RequsestRecord

// int32 shard = 1;
inline void RequsestRecord::clear_shard() {
  shard_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequsestRecord::_internal_shard() const {
  return shard_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequsestRecord::shard() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.RequsestRecord.shard)
  return _internal_shard();
}
inline void RequsestRecord::_internal_set_shard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shard_ = value;
}
inline void RequsestRecord::set_shard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shard(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.RequsestRecord.shard)
}

// bytes key = 2;
inline void RequsestRecord::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequsestRecord::key() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.RequsestRecord.key)
  return _internal_key();
}
inline void RequsestRecord::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.RequsestRecord.key)
}
inline std::string* RequsestRecord::mutable_key() {
  // @@protoc_insertion_point(field_mutable:grpc.wabbywabbo.dbserver.RequsestRecord.key)
  return _internal_mutable_key();
}
inline const std::string& RequsestRecord::_internal_key() const {
  return key_.Get();
}
inline void RequsestRecord::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequsestRecord::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.wabbywabbo.dbserver.RequsestRecord.key)
}
inline void RequsestRecord::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.wabbywabbo.dbserver.RequsestRecord.key)
}
inline void RequsestRecord::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.wabbywabbo.dbserver.RequsestRecord.key)
}
inline std::string* RequsestRecord::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequsestRecord::release_key() {
  // @@protoc_insertion_point(field_release:grpc.wabbywabbo.dbserver.RequsestRecord.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequsestRecord::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.wabbywabbo.dbserver.RequsestRecord.key)
}

// bytes value = 3;
inline bool RequsestRecord::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequsestRecord::has_value() const {
  return _internal_has_value();
}
inline void RequsestRecord::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequsestRecord::value() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.RequsestRecord.value)
  return _internal_value();
}
inline void RequsestRecord::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.RequsestRecord.value)
}
inline std::string* RequsestRecord::mutable_value() {
  // @@protoc_insertion_point(field_mutable:grpc.wabbywabbo.dbserver.RequsestRecord.value)
  return _internal_mutable_value();
}
inline const std::string& RequsestRecord::_internal_value() const {
  return value_.Get();
}
inline void RequsestRecord::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequsestRecord::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.wabbywabbo.dbserver.RequsestRecord.value)
}
inline void RequsestRecord::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.wabbywabbo.dbserver.RequsestRecord.value)
}
inline void RequsestRecord::set_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.wabbywabbo.dbserver.RequsestRecord.value)
}
inline std::string* RequsestRecord::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequsestRecord::release_value() {
  // @@protoc_insertion_point(field_release:grpc.wabbywabbo.dbserver.RequsestRecord.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequsestRecord::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.wabbywabbo.dbserver.RequsestRecord.value)
}

// int64 ttl = 4;
inline bool RequsestRecord::_internal_has_ttl() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RequsestRecord::has_ttl() const {
  return _internal_has_ttl();
}
inline void RequsestRecord::clear_ttl() {
  ttl_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequsestRecord::_internal_ttl() const {
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequsestRecord::ttl() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.RequsestRecord.ttl)
  return _internal_ttl();
}
inline void RequsestRecord::_internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  ttl_ = value;
}
inline void RequsestRecord::set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.RequsestRecord.ttl)
}

// .grpc.wabbywabbo.dbserver.RecordType record_type = 5;
inline bool RequsestRecord::_internal_has_record_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequsestRecord::has_record_type() const {
  return _internal_has_record_type();
}
inline void RequsestRecord::clear_record_type() {
  record_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::grpc::wabbywabbo::dbserver::RecordType RequsestRecord::_internal_record_type() const {
  return static_cast< ::grpc::wabbywabbo::dbserver::RecordType >(record_type_);
}
inline ::grpc::wabbywabbo::dbserver::RecordType RequsestRecord::record_type() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.RequsestRecord.record_type)
  return _internal_record_type();
}
inline void RequsestRecord::_internal_set_record_type(::grpc::wabbywabbo::dbserver::RecordType value) {
  _has_bits_[0] |= 0x00000002u;
  record_type_ = value;
}
inline void RequsestRecord::set_record_type(::grpc::wabbywabbo::dbserver::RecordType value) {
  _internal_set_record_type(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.RequsestRecord.record_type)
}

// -------------------------------------------------------------------

// ResponseRecord

// bytes key = 1;
inline void ResponseRecord::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResponseRecord::key() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.ResponseRecord.key)
  return _internal_key();
}
inline void ResponseRecord::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.ResponseRecord.key)
}
inline std::string* ResponseRecord::mutable_key() {
  // @@protoc_insertion_point(field_mutable:grpc.wabbywabbo.dbserver.ResponseRecord.key)
  return _internal_mutable_key();
}
inline const std::string& ResponseRecord::_internal_key() const {
  return key_.Get();
}
inline void ResponseRecord::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResponseRecord::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.wabbywabbo.dbserver.ResponseRecord.key)
}
inline void ResponseRecord::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.wabbywabbo.dbserver.ResponseRecord.key)
}
inline void ResponseRecord::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.wabbywabbo.dbserver.ResponseRecord.key)
}
inline std::string* ResponseRecord::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResponseRecord::release_key() {
  // @@protoc_insertion_point(field_release:grpc.wabbywabbo.dbserver.ResponseRecord.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseRecord::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.wabbywabbo.dbserver.ResponseRecord.key)
}

// bytes value = 2;
inline void ResponseRecord::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResponseRecord::value() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.ResponseRecord.value)
  return _internal_value();
}
inline void ResponseRecord::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.ResponseRecord.value)
}
inline std::string* ResponseRecord::mutable_value() {
  // @@protoc_insertion_point(field_mutable:grpc.wabbywabbo.dbserver.ResponseRecord.value)
  return _internal_mutable_value();
}
inline const std::string& ResponseRecord::_internal_value() const {
  return value_.Get();
}
inline void ResponseRecord::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResponseRecord::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpc.wabbywabbo.dbserver.ResponseRecord.value)
}
inline void ResponseRecord::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:grpc.wabbywabbo.dbserver.ResponseRecord.value)
}
inline void ResponseRecord::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpc.wabbywabbo.dbserver.ResponseRecord.value)
}
inline std::string* ResponseRecord::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResponseRecord::release_value() {
  // @@protoc_insertion_point(field_release:grpc.wabbywabbo.dbserver.ResponseRecord.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseRecord::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpc.wabbywabbo.dbserver.ResponseRecord.value)
}

// int64 ttl = 3;
inline void ResponseRecord::clear_ttl() {
  ttl_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseRecord::_internal_ttl() const {
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseRecord::ttl() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.ResponseRecord.ttl)
  return _internal_ttl();
}
inline void ResponseRecord::_internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ttl_ = value;
}
inline void ResponseRecord::set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.ResponseRecord.ttl)
}

// bool is_delete = 4;
inline bool ResponseRecord::_internal_has_is_delete() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResponseRecord::has_is_delete() const {
  return _internal_has_is_delete();
}
inline void ResponseRecord::clear_is_delete() {
  is_delete_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ResponseRecord::_internal_is_delete() const {
  return is_delete_;
}
inline bool ResponseRecord::is_delete() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.ResponseRecord.is_delete)
  return _internal_is_delete();
}
inline void ResponseRecord::_internal_set_is_delete(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_delete_ = value;
}
inline void ResponseRecord::set_is_delete(bool value) {
  _internal_set_is_delete(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.ResponseRecord.is_delete)
}

// -------------------------------------------------------------------

// GetShardDataRequest

// .grpc.wabbywabbo.dbserver.RequsestRecord record = 1;
inline bool GetShardDataRequest::_internal_has_record() const {
  return this != internal_default_instance() && record_ != nullptr;
}
inline bool GetShardDataRequest::has_record() const {
  return _internal_has_record();
}
inline void GetShardDataRequest::clear_record() {
  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
}
inline const ::grpc::wabbywabbo::dbserver::RequsestRecord& GetShardDataRequest::_internal_record() const {
  const ::grpc::wabbywabbo::dbserver::RequsestRecord* p = record_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::wabbywabbo::dbserver::RequsestRecord&>(
      ::grpc::wabbywabbo::dbserver::_RequsestRecord_default_instance_);
}
inline const ::grpc::wabbywabbo::dbserver::RequsestRecord& GetShardDataRequest::record() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.GetShardDataRequest.record)
  return _internal_record();
}
inline void GetShardDataRequest::unsafe_arena_set_allocated_record(
    ::grpc::wabbywabbo::dbserver::RequsestRecord* record) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.wabbywabbo.dbserver.GetShardDataRequest.record)
}
inline ::grpc::wabbywabbo::dbserver::RequsestRecord* GetShardDataRequest::release_record() {
  
  ::grpc::wabbywabbo::dbserver::RequsestRecord* temp = record_;
  record_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::wabbywabbo::dbserver::RequsestRecord* GetShardDataRequest::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:grpc.wabbywabbo.dbserver.GetShardDataRequest.record)
  
  ::grpc::wabbywabbo::dbserver::RequsestRecord* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::grpc::wabbywabbo::dbserver::RequsestRecord* GetShardDataRequest::_internal_mutable_record() {
  
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::wabbywabbo::dbserver::RequsestRecord>(GetArena());
    record_ = p;
  }
  return record_;
}
inline ::grpc::wabbywabbo::dbserver::RequsestRecord* GetShardDataRequest::mutable_record() {
  // @@protoc_insertion_point(field_mutable:grpc.wabbywabbo.dbserver.GetShardDataRequest.record)
  return _internal_mutable_record();
}
inline void GetShardDataRequest::set_allocated_record(::grpc::wabbywabbo::dbserver::RequsestRecord* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:grpc.wabbywabbo.dbserver.GetShardDataRequest.record)
}

// -------------------------------------------------------------------

// GetShardDataResponse

// .grpc.wabbywabbo.dbserver.Status status = 1;
inline void GetShardDataResponse::clear_status() {
  status_ = 0;
}
inline ::grpc::wabbywabbo::dbserver::Status GetShardDataResponse::_internal_status() const {
  return static_cast< ::grpc::wabbywabbo::dbserver::Status >(status_);
}
inline ::grpc::wabbywabbo::dbserver::Status GetShardDataResponse::status() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.GetShardDataResponse.status)
  return _internal_status();
}
inline void GetShardDataResponse::_internal_set_status(::grpc::wabbywabbo::dbserver::Status value) {
  
  status_ = value;
}
inline void GetShardDataResponse::set_status(::grpc::wabbywabbo::dbserver::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.GetShardDataResponse.status)
}

// .grpc.wabbywabbo.dbserver.ResponseRecord record = 2;
inline bool GetShardDataResponse::_internal_has_record() const {
  return this != internal_default_instance() && record_ != nullptr;
}
inline bool GetShardDataResponse::has_record() const {
  return _internal_has_record();
}
inline void GetShardDataResponse::clear_record() {
  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
}
inline const ::grpc::wabbywabbo::dbserver::ResponseRecord& GetShardDataResponse::_internal_record() const {
  const ::grpc::wabbywabbo::dbserver::ResponseRecord* p = record_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::wabbywabbo::dbserver::ResponseRecord&>(
      ::grpc::wabbywabbo::dbserver::_ResponseRecord_default_instance_);
}
inline const ::grpc::wabbywabbo::dbserver::ResponseRecord& GetShardDataResponse::record() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.GetShardDataResponse.record)
  return _internal_record();
}
inline void GetShardDataResponse::unsafe_arena_set_allocated_record(
    ::grpc::wabbywabbo::dbserver::ResponseRecord* record) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.wabbywabbo.dbserver.GetShardDataResponse.record)
}
inline ::grpc::wabbywabbo::dbserver::ResponseRecord* GetShardDataResponse::release_record() {
  
  ::grpc::wabbywabbo::dbserver::ResponseRecord* temp = record_;
  record_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::wabbywabbo::dbserver::ResponseRecord* GetShardDataResponse::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:grpc.wabbywabbo.dbserver.GetShardDataResponse.record)
  
  ::grpc::wabbywabbo::dbserver::ResponseRecord* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::grpc::wabbywabbo::dbserver::ResponseRecord* GetShardDataResponse::_internal_mutable_record() {
  
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::wabbywabbo::dbserver::ResponseRecord>(GetArena());
    record_ = p;
  }
  return record_;
}
inline ::grpc::wabbywabbo::dbserver::ResponseRecord* GetShardDataResponse::mutable_record() {
  // @@protoc_insertion_point(field_mutable:grpc.wabbywabbo.dbserver.GetShardDataResponse.record)
  return _internal_mutable_record();
}
inline void GetShardDataResponse::set_allocated_record(::grpc::wabbywabbo::dbserver::ResponseRecord* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:grpc.wabbywabbo.dbserver.GetShardDataResponse.record)
}

// -------------------------------------------------------------------

// SetShardDataRequest

// .grpc.wabbywabbo.dbserver.RequsestRecord record = 1;
inline bool SetShardDataRequest::_internal_has_record() const {
  return this != internal_default_instance() && record_ != nullptr;
}
inline bool SetShardDataRequest::has_record() const {
  return _internal_has_record();
}
inline void SetShardDataRequest::clear_record() {
  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
}
inline const ::grpc::wabbywabbo::dbserver::RequsestRecord& SetShardDataRequest::_internal_record() const {
  const ::grpc::wabbywabbo::dbserver::RequsestRecord* p = record_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::wabbywabbo::dbserver::RequsestRecord&>(
      ::grpc::wabbywabbo::dbserver::_RequsestRecord_default_instance_);
}
inline const ::grpc::wabbywabbo::dbserver::RequsestRecord& SetShardDataRequest::record() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.SetShardDataRequest.record)
  return _internal_record();
}
inline void SetShardDataRequest::unsafe_arena_set_allocated_record(
    ::grpc::wabbywabbo::dbserver::RequsestRecord* record) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.wabbywabbo.dbserver.SetShardDataRequest.record)
}
inline ::grpc::wabbywabbo::dbserver::RequsestRecord* SetShardDataRequest::release_record() {
  
  ::grpc::wabbywabbo::dbserver::RequsestRecord* temp = record_;
  record_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::wabbywabbo::dbserver::RequsestRecord* SetShardDataRequest::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:grpc.wabbywabbo.dbserver.SetShardDataRequest.record)
  
  ::grpc::wabbywabbo::dbserver::RequsestRecord* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::grpc::wabbywabbo::dbserver::RequsestRecord* SetShardDataRequest::_internal_mutable_record() {
  
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::wabbywabbo::dbserver::RequsestRecord>(GetArena());
    record_ = p;
  }
  return record_;
}
inline ::grpc::wabbywabbo::dbserver::RequsestRecord* SetShardDataRequest::mutable_record() {
  // @@protoc_insertion_point(field_mutable:grpc.wabbywabbo.dbserver.SetShardDataRequest.record)
  return _internal_mutable_record();
}
inline void SetShardDataRequest::set_allocated_record(::grpc::wabbywabbo::dbserver::RequsestRecord* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:grpc.wabbywabbo.dbserver.SetShardDataRequest.record)
}

// -------------------------------------------------------------------

// SetShardDataResponse

// .grpc.wabbywabbo.dbserver.Status status = 1;
inline void SetShardDataResponse::clear_status() {
  status_ = 0;
}
inline ::grpc::wabbywabbo::dbserver::Status SetShardDataResponse::_internal_status() const {
  return static_cast< ::grpc::wabbywabbo::dbserver::Status >(status_);
}
inline ::grpc::wabbywabbo::dbserver::Status SetShardDataResponse::status() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.SetShardDataResponse.status)
  return _internal_status();
}
inline void SetShardDataResponse::_internal_set_status(::grpc::wabbywabbo::dbserver::Status value) {
  
  status_ = value;
}
inline void SetShardDataResponse::set_status(::grpc::wabbywabbo::dbserver::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.SetShardDataResponse.status)
}

// bool old_str_exists = 2;
inline void SetShardDataResponse::clear_old_str_exists() {
  old_str_exists_ = false;
}
inline bool SetShardDataResponse::_internal_old_str_exists() const {
  return old_str_exists_;
}
inline bool SetShardDataResponse::old_str_exists() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.SetShardDataResponse.old_str_exists)
  return _internal_old_str_exists();
}
inline void SetShardDataResponse::_internal_set_old_str_exists(bool value) {
  
  old_str_exists_ = value;
}
inline void SetShardDataResponse::set_old_str_exists(bool value) {
  _internal_set_old_str_exists(value);
  // @@protoc_insertion_point(field_set:grpc.wabbywabbo.dbserver.SetShardDataResponse.old_str_exists)
}

// .grpc.wabbywabbo.dbserver.ResponseRecord record = 3;
inline bool SetShardDataResponse::_internal_has_record() const {
  return this != internal_default_instance() && record_ != nullptr;
}
inline bool SetShardDataResponse::has_record() const {
  return _internal_has_record();
}
inline void SetShardDataResponse::clear_record() {
  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
}
inline const ::grpc::wabbywabbo::dbserver::ResponseRecord& SetShardDataResponse::_internal_record() const {
  const ::grpc::wabbywabbo::dbserver::ResponseRecord* p = record_;
  return p != nullptr ? *p : reinterpret_cast<const ::grpc::wabbywabbo::dbserver::ResponseRecord&>(
      ::grpc::wabbywabbo::dbserver::_ResponseRecord_default_instance_);
}
inline const ::grpc::wabbywabbo::dbserver::ResponseRecord& SetShardDataResponse::record() const {
  // @@protoc_insertion_point(field_get:grpc.wabbywabbo.dbserver.SetShardDataResponse.record)
  return _internal_record();
}
inline void SetShardDataResponse::unsafe_arena_set_allocated_record(
    ::grpc::wabbywabbo::dbserver::ResponseRecord* record) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:grpc.wabbywabbo.dbserver.SetShardDataResponse.record)
}
inline ::grpc::wabbywabbo::dbserver::ResponseRecord* SetShardDataResponse::release_record() {
  
  ::grpc::wabbywabbo::dbserver::ResponseRecord* temp = record_;
  record_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::grpc::wabbywabbo::dbserver::ResponseRecord* SetShardDataResponse::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:grpc.wabbywabbo.dbserver.SetShardDataResponse.record)
  
  ::grpc::wabbywabbo::dbserver::ResponseRecord* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::grpc::wabbywabbo::dbserver::ResponseRecord* SetShardDataResponse::_internal_mutable_record() {
  
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::grpc::wabbywabbo::dbserver::ResponseRecord>(GetArena());
    record_ = p;
  }
  return record_;
}
inline ::grpc::wabbywabbo::dbserver::ResponseRecord* SetShardDataResponse::mutable_record() {
  // @@protoc_insertion_point(field_mutable:grpc.wabbywabbo.dbserver.SetShardDataResponse.record)
  return _internal_mutable_record();
}
inline void SetShardDataResponse::set_allocated_record(::grpc::wabbywabbo::dbserver::ResponseRecord* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:grpc.wabbywabbo.dbserver.SetShardDataResponse.record)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbserver
}  // namespace wabbywabbo
}  // namespace grpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::grpc::wabbywabbo::dbserver::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc::wabbywabbo::dbserver::Status>() {
  return ::grpc::wabbywabbo::dbserver::Status_descriptor();
}
template <> struct is_proto_enum< ::grpc::wabbywabbo::dbserver::RecordType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::grpc::wabbywabbo::dbserver::RecordType>() {
  return ::grpc::wabbywabbo::dbserver::RecordType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2eproto
