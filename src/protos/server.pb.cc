// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequsestRecord_server_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_server_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseRecord_server_2eproto;
namespace grpc {
namespace wabbywabbo {
namespace dbserver {
class GetMasterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMasterRequest> _instance;
} _GetMasterRequest_default_instance_;
class GetMasterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMasterResponse> _instance;
} _GetMasterResponse_default_instance_;
class RequsestRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequsestRecord> _instance;
} _RequsestRecord_default_instance_;
class ResponseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseRecord> _instance;
} _ResponseRecord_default_instance_;
class GetShardDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetShardDataRequest> _instance;
} _GetShardDataRequest_default_instance_;
class GetShardDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetShardDataResponse> _instance;
} _GetShardDataResponse_default_instance_;
class SetShardDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetShardDataRequest> _instance;
} _SetShardDataRequest_default_instance_;
class SetShardDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetShardDataResponse> _instance;
} _SetShardDataResponse_default_instance_;
}  // namespace dbserver
}  // namespace wabbywabbo
}  // namespace grpc
static void InitDefaultsscc_info_GetMasterRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::wabbywabbo::dbserver::_GetMasterRequest_default_instance_;
    new (ptr) ::grpc::wabbywabbo::dbserver::GetMasterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMasterRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMasterRequest_server_2eproto}, {}};

static void InitDefaultsscc_info_GetMasterResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::wabbywabbo::dbserver::_GetMasterResponse_default_instance_;
    new (ptr) ::grpc::wabbywabbo::dbserver::GetMasterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMasterResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMasterResponse_server_2eproto}, {}};

static void InitDefaultsscc_info_GetShardDataRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::wabbywabbo::dbserver::_GetShardDataRequest_default_instance_;
    new (ptr) ::grpc::wabbywabbo::dbserver::GetShardDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetShardDataRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetShardDataRequest_server_2eproto}, {
      &scc_info_RequsestRecord_server_2eproto.base,}};

static void InitDefaultsscc_info_GetShardDataResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::wabbywabbo::dbserver::_GetShardDataResponse_default_instance_;
    new (ptr) ::grpc::wabbywabbo::dbserver::GetShardDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetShardDataResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetShardDataResponse_server_2eproto}, {
      &scc_info_ResponseRecord_server_2eproto.base,}};

static void InitDefaultsscc_info_RequsestRecord_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::wabbywabbo::dbserver::_RequsestRecord_default_instance_;
    new (ptr) ::grpc::wabbywabbo::dbserver::RequsestRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequsestRecord_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequsestRecord_server_2eproto}, {}};

static void InitDefaultsscc_info_ResponseRecord_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::wabbywabbo::dbserver::_ResponseRecord_default_instance_;
    new (ptr) ::grpc::wabbywabbo::dbserver::ResponseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseRecord_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResponseRecord_server_2eproto}, {}};

static void InitDefaultsscc_info_SetShardDataRequest_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::wabbywabbo::dbserver::_SetShardDataRequest_default_instance_;
    new (ptr) ::grpc::wabbywabbo::dbserver::SetShardDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetShardDataRequest_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetShardDataRequest_server_2eproto}, {
      &scc_info_RequsestRecord_server_2eproto.base,}};

static void InitDefaultsscc_info_SetShardDataResponse_server_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::grpc::wabbywabbo::dbserver::_SetShardDataResponse_default_instance_;
    new (ptr) ::grpc::wabbywabbo::dbserver::SetShardDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetShardDataResponse_server_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetShardDataResponse_server_2eproto}, {
      &scc_info_ResponseRecord_server_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_server_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::GetMasterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::GetMasterRequest, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::GetMasterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::GetMasterResponse, status_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::GetMasterResponse, db_id_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::RequsestRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::RequsestRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::RequsestRecord, shard_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::RequsestRecord, key_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::RequsestRecord, value_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::RequsestRecord, ttl_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::RequsestRecord, record_type_),
  ~0u,
  ~0u,
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::ResponseRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::ResponseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::ResponseRecord, key_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::ResponseRecord, value_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::ResponseRecord, ttl_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::ResponseRecord, is_delete_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::GetShardDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::GetShardDataRequest, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::GetShardDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::GetShardDataResponse, status_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::GetShardDataResponse, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::SetShardDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::SetShardDataRequest, record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::SetShardDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::SetShardDataResponse, status_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::SetShardDataResponse, old_str_exists_),
  PROTOBUF_FIELD_OFFSET(::grpc::wabbywabbo::dbserver::SetShardDataResponse, record_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpc::wabbywabbo::dbserver::GetMasterRequest)},
  { 6, -1, sizeof(::grpc::wabbywabbo::dbserver::GetMasterResponse)},
  { 13, 23, sizeof(::grpc::wabbywabbo::dbserver::RequsestRecord)},
  { 28, 37, sizeof(::grpc::wabbywabbo::dbserver::ResponseRecord)},
  { 41, -1, sizeof(::grpc::wabbywabbo::dbserver::GetShardDataRequest)},
  { 47, -1, sizeof(::grpc::wabbywabbo::dbserver::GetShardDataResponse)},
  { 54, -1, sizeof(::grpc::wabbywabbo::dbserver::SetShardDataRequest)},
  { 60, -1, sizeof(::grpc::wabbywabbo::dbserver::SetShardDataResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::wabbywabbo::dbserver::_GetMasterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::wabbywabbo::dbserver::_GetMasterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::wabbywabbo::dbserver::_RequsestRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::wabbywabbo::dbserver::_ResponseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::wabbywabbo::dbserver::_GetShardDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::wabbywabbo::dbserver::_GetShardDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::wabbywabbo::dbserver::_SetShardDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpc::wabbywabbo::dbserver::_SetShardDataResponse_default_instance_),
};

const char descriptor_table_protodef_server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014server.proto\022\030grpc.wabbywabbo.dbserver"
  "\"\"\n\020GetMasterRequest\022\016\n\006status\030\001 \001(\005\"2\n\021"
  "GetMasterResponse\022\016\n\006status\030\001 \001(\005\022\r\n\005db_"
  "id\030\002 \003(\005\"\264\001\n\016RequsestRecord\022\r\n\005shard\030\001 \001"
  "(\005\022\013\n\003key\030\002 \001(\014\022\022\n\005value\030\003 \001(\014H\000\210\001\001\022\020\n\003t"
  "tl\030\004 \001(\003H\001\210\001\001\022>\n\013record_type\030\005 \001(\0162$.grp"
  "c.wabbywabbo.dbserver.RecordTypeH\002\210\001\001B\010\n"
  "\006_valueB\006\n\004_ttlB\016\n\014_record_type\"_\n\016Respo"
  "nseRecord\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022\013\n"
  "\003ttl\030\003 \001(\003\022\026\n\tis_delete\030\004 \001(\010H\000\210\001\001B\014\n\n_i"
  "s_delete\"O\n\023GetShardDataRequest\0228\n\006recor"
  "d\030\001 \001(\0132(.grpc.wabbywabbo.dbserver.Requs"
  "estRecord\"\202\001\n\024GetShardDataResponse\0220\n\006st"
  "atus\030\001 \001(\0162 .grpc.wabbywabbo.dbserver.St"
  "atus\0228\n\006record\030\002 \001(\0132(.grpc.wabbywabbo.d"
  "bserver.ResponseRecord\"O\n\023SetShardDataRe"
  "quest\0228\n\006record\030\001 \001(\0132(.grpc.wabbywabbo."
  "dbserver.RequsestRecord\"\232\001\n\024SetShardData"
  "Response\0220\n\006status\030\001 \001(\0162 .grpc.wabbywab"
  "bo.dbserver.Status\022\026\n\016old_str_exists\030\002 \001"
  "(\010\0228\n\006record\030\003 \001(\0132(.grpc.wabbywabbo.dbs"
  "erver.ResponseRecord*R\n\006Status\022\006\n\002OK\020\000\022\023"
  "\n\017ERROR_NOT_FOUND\020\001\022\027\n\023ERROR_SHARD_INVAL"
  "ID\020\002\022\022\n\rERROR_UNKNOWN\020\217N*\036\n\nRecordType\022\007"
  "\n\003SET\020\000\022\007\n\003DEL\020\0012\310\002\n\tDbService\022i\n\016GetMas"
  "terShard\022*.grpc.wabbywabbo.dbserver.GetM"
  "asterRequest\032+.grpc.wabbywabbo.dbserver."
  "GetMasterResponse\022d\n\003Get\022-.grpc.wabbywab"
  "bo.dbserver.GetShardDataRequest\032..grpc.w"
  "abbywabbo.dbserver.GetShardDataResponse\022"
  "j\n\tSetString\022-.grpc.wabbywabbo.dbserver."
  "SetShardDataRequest\032..grpc.wabbywabbo.db"
  "server.SetShardDataResponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_server_2eproto_sccs[8] = {
  &scc_info_GetMasterRequest_server_2eproto.base,
  &scc_info_GetMasterResponse_server_2eproto.base,
  &scc_info_GetShardDataRequest_server_2eproto.base,
  &scc_info_GetShardDataResponse_server_2eproto.base,
  &scc_info_RequsestRecord_server_2eproto.base,
  &scc_info_ResponseRecord_server_2eproto.base,
  &scc_info_SetShardDataRequest_server_2eproto.base,
  &scc_info_SetShardDataResponse_server_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2eproto = {
  false, false, descriptor_table_protodef_server_2eproto, "server.proto", 1320,
  &descriptor_table_server_2eproto_once, descriptor_table_server_2eproto_sccs, descriptor_table_server_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_server_2eproto::offsets,
  file_level_metadata_server_2eproto, 8, file_level_enum_descriptors_server_2eproto, file_level_service_descriptors_server_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_server_2eproto)), true);
namespace grpc {
namespace wabbywabbo {
namespace dbserver {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2eproto);
  return file_level_enum_descriptors_server_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 9999:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2eproto);
  return file_level_enum_descriptors_server_2eproto[1];
}
bool RecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetMasterRequest::_Internal {
 public:
};

GetMasterRequest::GetMasterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.wabbywabbo.dbserver.GetMasterRequest)
}
GetMasterRequest::GetMasterRequest(const GetMasterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:grpc.wabbywabbo.dbserver.GetMasterRequest)
}

void GetMasterRequest::SharedCtor() {
  status_ = 0;
}

GetMasterRequest::~GetMasterRequest() {
  // @@protoc_insertion_point(destructor:grpc.wabbywabbo.dbserver.GetMasterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMasterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMasterRequest::ArenaDtor(void* object) {
  GetMasterRequest* _this = reinterpret_cast< GetMasterRequest* >(object);
  (void)_this;
}
void GetMasterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMasterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMasterRequest& GetMasterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMasterRequest_server_2eproto.base);
  return *internal_default_instance();
}


void GetMasterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.wabbywabbo.dbserver.GetMasterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMasterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMasterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.wabbywabbo.dbserver.GetMasterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.wabbywabbo.dbserver.GetMasterRequest)
  return target;
}

size_t GetMasterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.wabbywabbo.dbserver.GetMasterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMasterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.wabbywabbo.dbserver.GetMasterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMasterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMasterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.wabbywabbo.dbserver.GetMasterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.wabbywabbo.dbserver.GetMasterRequest)
    MergeFrom(*source);
  }
}

void GetMasterRequest::MergeFrom(const GetMasterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.wabbywabbo.dbserver.GetMasterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GetMasterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.wabbywabbo.dbserver.GetMasterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMasterRequest::CopyFrom(const GetMasterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.wabbywabbo.dbserver.GetMasterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMasterRequest::IsInitialized() const {
  return true;
}

void GetMasterRequest::InternalSwap(GetMasterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMasterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetMasterResponse::_Internal {
 public:
};

GetMasterResponse::GetMasterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  db_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.wabbywabbo.dbserver.GetMasterResponse)
}
GetMasterResponse::GetMasterResponse(const GetMasterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      db_id_(from.db_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:grpc.wabbywabbo.dbserver.GetMasterResponse)
}

void GetMasterResponse::SharedCtor() {
  status_ = 0;
}

GetMasterResponse::~GetMasterResponse() {
  // @@protoc_insertion_point(destructor:grpc.wabbywabbo.dbserver.GetMasterResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMasterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMasterResponse::ArenaDtor(void* object) {
  GetMasterResponse* _this = reinterpret_cast< GetMasterResponse* >(object);
  (void)_this;
}
void GetMasterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMasterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMasterResponse& GetMasterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMasterResponse_server_2eproto.base);
  return *internal_default_instance();
}


void GetMasterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.wabbywabbo.dbserver.GetMasterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_id_.Clear();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMasterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 db_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_db_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_db_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMasterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.wabbywabbo.dbserver.GetMasterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // repeated int32 db_id = 2;
  {
    int byte_size = _db_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_db_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.wabbywabbo.dbserver.GetMasterResponse)
  return target;
}

size_t GetMasterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.wabbywabbo.dbserver.GetMasterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 db_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->db_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _db_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMasterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.wabbywabbo.dbserver.GetMasterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMasterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMasterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.wabbywabbo.dbserver.GetMasterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.wabbywabbo.dbserver.GetMasterResponse)
    MergeFrom(*source);
  }
}

void GetMasterResponse::MergeFrom(const GetMasterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.wabbywabbo.dbserver.GetMasterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  db_id_.MergeFrom(from.db_id_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GetMasterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.wabbywabbo.dbserver.GetMasterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMasterResponse::CopyFrom(const GetMasterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.wabbywabbo.dbserver.GetMasterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMasterResponse::IsInitialized() const {
  return true;
}

void GetMasterResponse::InternalSwap(GetMasterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_id_.InternalSwap(&other->db_id_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMasterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequsestRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<RequsestRecord>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ttl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_record_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RequsestRecord::RequsestRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.wabbywabbo.dbserver.RequsestRecord)
}
RequsestRecord::RequsestRecord(const RequsestRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  ::memcpy(&shard_, &from.shard_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&shard_)) + sizeof(ttl_));
  // @@protoc_insertion_point(copy_constructor:grpc.wabbywabbo.dbserver.RequsestRecord)
}

void RequsestRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequsestRecord_server_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&shard_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&shard_)) + sizeof(ttl_));
}

RequsestRecord::~RequsestRecord() {
  // @@protoc_insertion_point(destructor:grpc.wabbywabbo.dbserver.RequsestRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequsestRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequsestRecord::ArenaDtor(void* object) {
  RequsestRecord* _this = reinterpret_cast< RequsestRecord* >(object);
  (void)_this;
}
void RequsestRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequsestRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequsestRecord& RequsestRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequsestRecord_server_2eproto.base);
  return *internal_default_instance();
}


void RequsestRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.wabbywabbo.dbserver.RequsestRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  shard_ = 0;
  if (cached_has_bits & 0x00000006u) {
    ::memset(&record_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ttl_) -
        reinterpret_cast<char*>(&record_type_)) + sizeof(ttl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequsestRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 shard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ttl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ttl(&has_bits);
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.wabbywabbo.dbserver.RecordType record_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_record_type(static_cast<::grpc::wabbywabbo::dbserver::RecordType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequsestRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.wabbywabbo.dbserver.RequsestRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shard = 1;
  if (this->shard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shard(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes value = 3;
  if (_internal_has_value()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  // int64 ttl = 4;
  if (_internal_has_ttl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_ttl(), target);
  }

  // .grpc.wabbywabbo.dbserver.RecordType record_type = 5;
  if (_internal_has_record_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_record_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.wabbywabbo.dbserver.RequsestRecord)
  return target;
}

size_t RequsestRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.wabbywabbo.dbserver.RequsestRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 shard = 1;
  if (this->shard() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shard());
  }

  if (cached_has_bits & 0x00000006u) {
    // .grpc.wabbywabbo.dbserver.RecordType record_type = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_record_type());
    }

    // int64 ttl = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_ttl());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequsestRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.wabbywabbo.dbserver.RequsestRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const RequsestRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequsestRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.wabbywabbo.dbserver.RequsestRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.wabbywabbo.dbserver.RequsestRecord)
    MergeFrom(*source);
  }
}

void RequsestRecord::MergeFrom(const RequsestRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.wabbywabbo.dbserver.RequsestRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  if (from.shard() != 0) {
    _internal_set_shard(from._internal_shard());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      record_type_ = from.record_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      ttl_ = from.ttl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequsestRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.wabbywabbo.dbserver.RequsestRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequsestRecord::CopyFrom(const RequsestRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.wabbywabbo.dbserver.RequsestRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequsestRecord::IsInitialized() const {
  return true;
}

void RequsestRecord::InternalSwap(RequsestRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequsestRecord, ttl_)
      + sizeof(RequsestRecord::ttl_)
      - PROTOBUF_FIELD_OFFSET(RequsestRecord, shard_)>(
          reinterpret_cast<char*>(&shard_),
          reinterpret_cast<char*>(&other->shard_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequsestRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResponseRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponseRecord>()._has_bits_);
  static void set_has_is_delete(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResponseRecord::ResponseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.wabbywabbo.dbserver.ResponseRecord)
}
ResponseRecord::ResponseRecord(const ResponseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  ::memcpy(&ttl_, &from.ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_delete_) -
    reinterpret_cast<char*>(&ttl_)) + sizeof(is_delete_));
  // @@protoc_insertion_point(copy_constructor:grpc.wabbywabbo.dbserver.ResponseRecord)
}

void ResponseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseRecord_server_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_delete_) -
      reinterpret_cast<char*>(&ttl_)) + sizeof(is_delete_));
}

ResponseRecord::~ResponseRecord() {
  // @@protoc_insertion_point(destructor:grpc.wabbywabbo.dbserver.ResponseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResponseRecord::ArenaDtor(void* object) {
  ResponseRecord* _this = reinterpret_cast< ResponseRecord* >(object);
  (void)_this;
}
void ResponseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseRecord& ResponseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseRecord_server_2eproto.base);
  return *internal_default_instance();
}


void ResponseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.wabbywabbo.dbserver.ResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ttl_ = PROTOBUF_LONGLONG(0);
  is_delete_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ttl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_delete = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_delete(&has_bits);
          is_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.wabbywabbo.dbserver.ResponseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // int64 ttl = 3;
  if (this->ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ttl(), target);
  }

  // bool is_delete = 4;
  if (_internal_has_is_delete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_delete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.wabbywabbo.dbserver.ResponseRecord)
  return target;
}

size_t ResponseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.wabbywabbo.dbserver.ResponseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int64 ttl = 3;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttl());
  }

  // bool is_delete = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.wabbywabbo.dbserver.ResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.wabbywabbo.dbserver.ResponseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.wabbywabbo.dbserver.ResponseRecord)
    MergeFrom(*source);
  }
}

void ResponseRecord::MergeFrom(const ResponseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.wabbywabbo.dbserver.ResponseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  if (from._internal_has_is_delete()) {
    _internal_set_is_delete(from._internal_is_delete());
  }
}

void ResponseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.wabbywabbo.dbserver.ResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRecord::CopyFrom(const ResponseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.wabbywabbo.dbserver.ResponseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRecord::IsInitialized() const {
  return true;
}

void ResponseRecord::InternalSwap(ResponseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseRecord, is_delete_)
      + sizeof(ResponseRecord::is_delete_)
      - PROTOBUF_FIELD_OFFSET(ResponseRecord, ttl_)>(
          reinterpret_cast<char*>(&ttl_),
          reinterpret_cast<char*>(&other->ttl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetShardDataRequest::_Internal {
 public:
  static const ::grpc::wabbywabbo::dbserver::RequsestRecord& record(const GetShardDataRequest* msg);
};

const ::grpc::wabbywabbo::dbserver::RequsestRecord&
GetShardDataRequest::_Internal::record(const GetShardDataRequest* msg) {
  return *msg->record_;
}
GetShardDataRequest::GetShardDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.wabbywabbo.dbserver.GetShardDataRequest)
}
GetShardDataRequest::GetShardDataRequest(const GetShardDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_record()) {
    record_ = new ::grpc::wabbywabbo::dbserver::RequsestRecord(*from.record_);
  } else {
    record_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.wabbywabbo.dbserver.GetShardDataRequest)
}

void GetShardDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetShardDataRequest_server_2eproto.base);
  record_ = nullptr;
}

GetShardDataRequest::~GetShardDataRequest() {
  // @@protoc_insertion_point(destructor:grpc.wabbywabbo.dbserver.GetShardDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetShardDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete record_;
}

void GetShardDataRequest::ArenaDtor(void* object) {
  GetShardDataRequest* _this = reinterpret_cast< GetShardDataRequest* >(object);
  (void)_this;
}
void GetShardDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetShardDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetShardDataRequest& GetShardDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetShardDataRequest_server_2eproto.base);
  return *internal_default_instance();
}


void GetShardDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.wabbywabbo.dbserver.GetShardDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .grpc.wabbywabbo.dbserver.RequsestRecord record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetShardDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.wabbywabbo.dbserver.GetShardDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.wabbywabbo.dbserver.RequsestRecord record = 1;
  if (this->has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.wabbywabbo.dbserver.GetShardDataRequest)
  return target;
}

size_t GetShardDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.wabbywabbo.dbserver.GetShardDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.wabbywabbo.dbserver.RequsestRecord record = 1;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetShardDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.wabbywabbo.dbserver.GetShardDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetShardDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetShardDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.wabbywabbo.dbserver.GetShardDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.wabbywabbo.dbserver.GetShardDataRequest)
    MergeFrom(*source);
  }
}

void GetShardDataRequest::MergeFrom(const GetShardDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.wabbywabbo.dbserver.GetShardDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_record()) {
    _internal_mutable_record()->::grpc::wabbywabbo::dbserver::RequsestRecord::MergeFrom(from._internal_record());
  }
}

void GetShardDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.wabbywabbo.dbserver.GetShardDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShardDataRequest::CopyFrom(const GetShardDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.wabbywabbo.dbserver.GetShardDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardDataRequest::IsInitialized() const {
  return true;
}

void GetShardDataRequest::InternalSwap(GetShardDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(record_, other->record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetShardDataResponse::_Internal {
 public:
  static const ::grpc::wabbywabbo::dbserver::ResponseRecord& record(const GetShardDataResponse* msg);
};

const ::grpc::wabbywabbo::dbserver::ResponseRecord&
GetShardDataResponse::_Internal::record(const GetShardDataResponse* msg) {
  return *msg->record_;
}
GetShardDataResponse::GetShardDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.wabbywabbo.dbserver.GetShardDataResponse)
}
GetShardDataResponse::GetShardDataResponse(const GetShardDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_record()) {
    record_ = new ::grpc::wabbywabbo::dbserver::ResponseRecord(*from.record_);
  } else {
    record_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:grpc.wabbywabbo.dbserver.GetShardDataResponse)
}

void GetShardDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetShardDataResponse_server_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&record_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&record_)) + sizeof(status_));
}

GetShardDataResponse::~GetShardDataResponse() {
  // @@protoc_insertion_point(destructor:grpc.wabbywabbo.dbserver.GetShardDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetShardDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete record_;
}

void GetShardDataResponse::ArenaDtor(void* object) {
  GetShardDataResponse* _this = reinterpret_cast< GetShardDataResponse* >(object);
  (void)_this;
}
void GetShardDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetShardDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetShardDataResponse& GetShardDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetShardDataResponse_server_2eproto.base);
  return *internal_default_instance();
}


void GetShardDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.wabbywabbo.dbserver.GetShardDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .grpc.wabbywabbo.dbserver.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::grpc::wabbywabbo::dbserver::Status>(val));
        } else goto handle_unusual;
        continue;
      // .grpc.wabbywabbo.dbserver.ResponseRecord record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetShardDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.wabbywabbo.dbserver.GetShardDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.wabbywabbo.dbserver.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .grpc.wabbywabbo.dbserver.ResponseRecord record = 2;
  if (this->has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.wabbywabbo.dbserver.GetShardDataResponse)
  return target;
}

size_t GetShardDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.wabbywabbo.dbserver.GetShardDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.wabbywabbo.dbserver.ResponseRecord record = 2;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  // .grpc.wabbywabbo.dbserver.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetShardDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.wabbywabbo.dbserver.GetShardDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetShardDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetShardDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.wabbywabbo.dbserver.GetShardDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.wabbywabbo.dbserver.GetShardDataResponse)
    MergeFrom(*source);
  }
}

void GetShardDataResponse::MergeFrom(const GetShardDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.wabbywabbo.dbserver.GetShardDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_record()) {
    _internal_mutable_record()->::grpc::wabbywabbo::dbserver::ResponseRecord::MergeFrom(from._internal_record());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GetShardDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.wabbywabbo.dbserver.GetShardDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShardDataResponse::CopyFrom(const GetShardDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.wabbywabbo.dbserver.GetShardDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardDataResponse::IsInitialized() const {
  return true;
}

void GetShardDataResponse::InternalSwap(GetShardDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetShardDataResponse, status_)
      + sizeof(GetShardDataResponse::status_)
      - PROTOBUF_FIELD_OFFSET(GetShardDataResponse, record_)>(
          reinterpret_cast<char*>(&record_),
          reinterpret_cast<char*>(&other->record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetShardDataRequest::_Internal {
 public:
  static const ::grpc::wabbywabbo::dbserver::RequsestRecord& record(const SetShardDataRequest* msg);
};

const ::grpc::wabbywabbo::dbserver::RequsestRecord&
SetShardDataRequest::_Internal::record(const SetShardDataRequest* msg) {
  return *msg->record_;
}
SetShardDataRequest::SetShardDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.wabbywabbo.dbserver.SetShardDataRequest)
}
SetShardDataRequest::SetShardDataRequest(const SetShardDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_record()) {
    record_ = new ::grpc::wabbywabbo::dbserver::RequsestRecord(*from.record_);
  } else {
    record_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:grpc.wabbywabbo.dbserver.SetShardDataRequest)
}

void SetShardDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetShardDataRequest_server_2eproto.base);
  record_ = nullptr;
}

SetShardDataRequest::~SetShardDataRequest() {
  // @@protoc_insertion_point(destructor:grpc.wabbywabbo.dbserver.SetShardDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetShardDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete record_;
}

void SetShardDataRequest::ArenaDtor(void* object) {
  SetShardDataRequest* _this = reinterpret_cast< SetShardDataRequest* >(object);
  (void)_this;
}
void SetShardDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetShardDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetShardDataRequest& SetShardDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetShardDataRequest_server_2eproto.base);
  return *internal_default_instance();
}


void SetShardDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.wabbywabbo.dbserver.SetShardDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetShardDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .grpc.wabbywabbo.dbserver.RequsestRecord record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetShardDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.wabbywabbo.dbserver.SetShardDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.wabbywabbo.dbserver.RequsestRecord record = 1;
  if (this->has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.wabbywabbo.dbserver.SetShardDataRequest)
  return target;
}

size_t SetShardDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.wabbywabbo.dbserver.SetShardDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.wabbywabbo.dbserver.RequsestRecord record = 1;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShardDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.wabbywabbo.dbserver.SetShardDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetShardDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetShardDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.wabbywabbo.dbserver.SetShardDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.wabbywabbo.dbserver.SetShardDataRequest)
    MergeFrom(*source);
  }
}

void SetShardDataRequest::MergeFrom(const SetShardDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.wabbywabbo.dbserver.SetShardDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_record()) {
    _internal_mutable_record()->::grpc::wabbywabbo::dbserver::RequsestRecord::MergeFrom(from._internal_record());
  }
}

void SetShardDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.wabbywabbo.dbserver.SetShardDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetShardDataRequest::CopyFrom(const SetShardDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.wabbywabbo.dbserver.SetShardDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShardDataRequest::IsInitialized() const {
  return true;
}

void SetShardDataRequest::InternalSwap(SetShardDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(record_, other->record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetShardDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetShardDataResponse::_Internal {
 public:
  static const ::grpc::wabbywabbo::dbserver::ResponseRecord& record(const SetShardDataResponse* msg);
};

const ::grpc::wabbywabbo::dbserver::ResponseRecord&
SetShardDataResponse::_Internal::record(const SetShardDataResponse* msg) {
  return *msg->record_;
}
SetShardDataResponse::SetShardDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpc.wabbywabbo.dbserver.SetShardDataResponse)
}
SetShardDataResponse::SetShardDataResponse(const SetShardDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_record()) {
    record_ = new ::grpc::wabbywabbo::dbserver::ResponseRecord(*from.record_);
  } else {
    record_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_str_exists_) -
    reinterpret_cast<char*>(&status_)) + sizeof(old_str_exists_));
  // @@protoc_insertion_point(copy_constructor:grpc.wabbywabbo.dbserver.SetShardDataResponse)
}

void SetShardDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetShardDataResponse_server_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&record_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&old_str_exists_) -
      reinterpret_cast<char*>(&record_)) + sizeof(old_str_exists_));
}

SetShardDataResponse::~SetShardDataResponse() {
  // @@protoc_insertion_point(destructor:grpc.wabbywabbo.dbserver.SetShardDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetShardDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete record_;
}

void SetShardDataResponse::ArenaDtor(void* object) {
  SetShardDataResponse* _this = reinterpret_cast< SetShardDataResponse* >(object);
  (void)_this;
}
void SetShardDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetShardDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetShardDataResponse& SetShardDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetShardDataResponse_server_2eproto.base);
  return *internal_default_instance();
}


void SetShardDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpc.wabbywabbo.dbserver.SetShardDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_str_exists_) -
      reinterpret_cast<char*>(&status_)) + sizeof(old_str_exists_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetShardDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .grpc.wabbywabbo.dbserver.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::grpc::wabbywabbo::dbserver::Status>(val));
        } else goto handle_unusual;
        continue;
      // bool old_str_exists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          old_str_exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .grpc.wabbywabbo.dbserver.ResponseRecord record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetShardDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpc.wabbywabbo.dbserver.SetShardDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .grpc.wabbywabbo.dbserver.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // bool old_str_exists = 2;
  if (this->old_str_exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_old_str_exists(), target);
  }

  // .grpc.wabbywabbo.dbserver.ResponseRecord record = 3;
  if (this->has_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpc.wabbywabbo.dbserver.SetShardDataResponse)
  return target;
}

size_t SetShardDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpc.wabbywabbo.dbserver.SetShardDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grpc.wabbywabbo.dbserver.ResponseRecord record = 3;
  if (this->has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_);
  }

  // .grpc.wabbywabbo.dbserver.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // bool old_str_exists = 2;
  if (this->old_str_exists() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetShardDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpc.wabbywabbo.dbserver.SetShardDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetShardDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetShardDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpc.wabbywabbo.dbserver.SetShardDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpc.wabbywabbo.dbserver.SetShardDataResponse)
    MergeFrom(*source);
  }
}

void SetShardDataResponse::MergeFrom(const SetShardDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpc.wabbywabbo.dbserver.SetShardDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_record()) {
    _internal_mutable_record()->::grpc::wabbywabbo::dbserver::ResponseRecord::MergeFrom(from._internal_record());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.old_str_exists() != 0) {
    _internal_set_old_str_exists(from._internal_old_str_exists());
  }
}

void SetShardDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpc.wabbywabbo.dbserver.SetShardDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetShardDataResponse::CopyFrom(const SetShardDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpc.wabbywabbo.dbserver.SetShardDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetShardDataResponse::IsInitialized() const {
  return true;
}

void SetShardDataResponse::InternalSwap(SetShardDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetShardDataResponse, old_str_exists_)
      + sizeof(SetShardDataResponse::old_str_exists_)
      - PROTOBUF_FIELD_OFFSET(SetShardDataResponse, record_)>(
          reinterpret_cast<char*>(&record_),
          reinterpret_cast<char*>(&other->record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetShardDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DbService::~DbService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DbService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2eproto);
  return file_level_service_descriptors_server_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DbService::GetDescriptor() {
  return descriptor();
}

void DbService::GetMasterShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grpc::wabbywabbo::dbserver::GetMasterRequest*,
                         ::grpc::wabbywabbo::dbserver::GetMasterResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMasterShard() not implemented.");
  done->Run();
}

void DbService::Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grpc::wabbywabbo::dbserver::GetShardDataRequest*,
                         ::grpc::wabbywabbo::dbserver::GetShardDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Get() not implemented.");
  done->Run();
}

void DbService::SetString(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::grpc::wabbywabbo::dbserver::SetShardDataRequest*,
                         ::grpc::wabbywabbo::dbserver::SetShardDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetString() not implemented.");
  done->Run();
}

void DbService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_server_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetMasterShard(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grpc::wabbywabbo::dbserver::GetMasterRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grpc::wabbywabbo::dbserver::GetMasterResponse*>(
                 response),
             done);
      break;
    case 1:
      Get(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grpc::wabbywabbo::dbserver::GetShardDataRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grpc::wabbywabbo::dbserver::GetShardDataResponse*>(
                 response),
             done);
      break;
    case 2:
      SetString(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::grpc::wabbywabbo::dbserver::SetShardDataRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::grpc::wabbywabbo::dbserver::SetShardDataResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DbService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::grpc::wabbywabbo::dbserver::GetMasterRequest::default_instance();
    case 1:
      return ::grpc::wabbywabbo::dbserver::GetShardDataRequest::default_instance();
    case 2:
      return ::grpc::wabbywabbo::dbserver::SetShardDataRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DbService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::grpc::wabbywabbo::dbserver::GetMasterResponse::default_instance();
    case 1:
      return ::grpc::wabbywabbo::dbserver::GetShardDataResponse::default_instance();
    case 2:
      return ::grpc::wabbywabbo::dbserver::SetShardDataResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DbService_Stub::DbService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DbService_Stub::DbService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
DbService_Stub::~DbService_Stub() {
  if (owns_channel_) delete channel_;
}

void DbService_Stub::GetMasterShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grpc::wabbywabbo::dbserver::GetMasterRequest* request,
                              ::grpc::wabbywabbo::dbserver::GetMasterResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DbService_Stub::Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grpc::wabbywabbo::dbserver::GetShardDataRequest* request,
                              ::grpc::wabbywabbo::dbserver::GetShardDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DbService_Stub::SetString(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::grpc::wabbywabbo::dbserver::SetShardDataRequest* request,
                              ::grpc::wabbywabbo::dbserver::SetShardDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dbserver
}  // namespace wabbywabbo
}  // namespace grpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpc::wabbywabbo::dbserver::GetMasterRequest* Arena::CreateMaybeMessage< ::grpc::wabbywabbo::dbserver::GetMasterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::wabbywabbo::dbserver::GetMasterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::wabbywabbo::dbserver::GetMasterResponse* Arena::CreateMaybeMessage< ::grpc::wabbywabbo::dbserver::GetMasterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::wabbywabbo::dbserver::GetMasterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::wabbywabbo::dbserver::RequsestRecord* Arena::CreateMaybeMessage< ::grpc::wabbywabbo::dbserver::RequsestRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::wabbywabbo::dbserver::RequsestRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::wabbywabbo::dbserver::ResponseRecord* Arena::CreateMaybeMessage< ::grpc::wabbywabbo::dbserver::ResponseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::wabbywabbo::dbserver::ResponseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::wabbywabbo::dbserver::GetShardDataRequest* Arena::CreateMaybeMessage< ::grpc::wabbywabbo::dbserver::GetShardDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::wabbywabbo::dbserver::GetShardDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::wabbywabbo::dbserver::GetShardDataResponse* Arena::CreateMaybeMessage< ::grpc::wabbywabbo::dbserver::GetShardDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::wabbywabbo::dbserver::GetShardDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::wabbywabbo::dbserver::SetShardDataRequest* Arena::CreateMaybeMessage< ::grpc::wabbywabbo::dbserver::SetShardDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::wabbywabbo::dbserver::SetShardDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpc::wabbywabbo::dbserver::SetShardDataResponse* Arena::CreateMaybeMessage< ::grpc::wabbywabbo::dbserver::SetShardDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpc::wabbywabbo::dbserver::SetShardDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
