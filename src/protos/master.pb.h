// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_master_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_master_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_master_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_master_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_master_2eproto;
class GetTopoRequest;
class GetTopoRequestDefaultTypeInternal;
extern GetTopoRequestDefaultTypeInternal _GetTopoRequest_default_instance_;
class GetTopoResponse;
class GetTopoResponseDefaultTypeInternal;
extern GetTopoResponseDefaultTypeInternal _GetTopoResponse_default_instance_;
class GetVersionRequest;
class GetVersionRequestDefaultTypeInternal;
extern GetVersionRequestDefaultTypeInternal _GetVersionRequest_default_instance_;
class GetVersionResponse;
class GetVersionResponseDefaultTypeInternal;
extern GetVersionResponseDefaultTypeInternal _GetVersionResponse_default_instance_;
class UpdateRoleRequest;
class UpdateRoleRequestDefaultTypeInternal;
extern UpdateRoleRequestDefaultTypeInternal _UpdateRoleRequest_default_instance_;
class UpdateRoleResponse;
class UpdateRoleResponseDefaultTypeInternal;
extern UpdateRoleResponseDefaultTypeInternal _UpdateRoleResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GetTopoRequest* Arena::CreateMaybeMessage<::GetTopoRequest>(Arena*);
template<> ::GetTopoResponse* Arena::CreateMaybeMessage<::GetTopoResponse>(Arena*);
template<> ::GetVersionRequest* Arena::CreateMaybeMessage<::GetVersionRequest>(Arena*);
template<> ::GetVersionResponse* Arena::CreateMaybeMessage<::GetVersionResponse>(Arena*);
template<> ::UpdateRoleRequest* Arena::CreateMaybeMessage<::UpdateRoleRequest>(Arena*);
template<> ::UpdateRoleResponse* Arena::CreateMaybeMessage<::UpdateRoleResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UpdateRoleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateRoleRequest) */ {
 public:
  inline UpdateRoleRequest() : UpdateRoleRequest(nullptr) {}
  virtual ~UpdateRoleRequest();

  UpdateRoleRequest(const UpdateRoleRequest& from);
  UpdateRoleRequest(UpdateRoleRequest&& from) noexcept
    : UpdateRoleRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRoleRequest& operator=(const UpdateRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoleRequest& operator=(UpdateRoleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRoleRequest& default_instance();

  static inline const UpdateRoleRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRoleRequest*>(
               &_UpdateRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UpdateRoleRequest& a, UpdateRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRoleRequest* New() const final {
    return CreateMaybeMessage<UpdateRoleRequest>(nullptr);
  }

  UpdateRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRoleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRoleRequest& from);
  void MergeFrom(const UpdateRoleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateRoleRequest";
  }
  protected:
  explicit UpdateRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_2eproto);
    return ::descriptor_table_master_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardListFieldNumber = 2,
    kIsMasterFieldNumber = 3,
    kHostsFieldNumber = 1,
  };
  // repeated int32 shard_list = 2;
  int shard_list_size() const;
  private:
  int _internal_shard_list_size() const;
  public:
  void clear_shard_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shard_list() const;
  void _internal_add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shard_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shard_list(int index) const;
  void set_shard_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shard_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shard_list();

  // repeated int32 is_master = 3;
  int is_master_size() const;
  private:
  int _internal_is_master_size() const;
  public:
  void clear_is_master();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_master(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_is_master() const;
  void _internal_add_is_master(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_is_master();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 is_master(int index) const;
  void set_is_master(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_is_master(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      is_master() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_is_master();

  // string hosts = 1;
  void clear_hosts();
  const std::string& hosts() const;
  void set_hosts(const std::string& value);
  void set_hosts(std::string&& value);
  void set_hosts(const char* value);
  void set_hosts(const char* value, size_t size);
  std::string* mutable_hosts();
  std::string* release_hosts();
  void set_allocated_hosts(std::string* hosts);
  private:
  const std::string& _internal_hosts() const;
  void _internal_set_hosts(const std::string& value);
  std::string* _internal_mutable_hosts();
  public:

  // @@protoc_insertion_point(class_scope:UpdateRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shard_list_;
  mutable std::atomic<int> _shard_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > is_master_;
  mutable std::atomic<int> _is_master_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hosts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_2eproto;
};
// -------------------------------------------------------------------

class UpdateRoleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateRoleResponse) */ {
 public:
  inline UpdateRoleResponse() : UpdateRoleResponse(nullptr) {}
  virtual ~UpdateRoleResponse();

  UpdateRoleResponse(const UpdateRoleResponse& from);
  UpdateRoleResponse(UpdateRoleResponse&& from) noexcept
    : UpdateRoleResponse() {
    *this = ::std::move(from);
  }

  inline UpdateRoleResponse& operator=(const UpdateRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRoleResponse& operator=(UpdateRoleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRoleResponse& default_instance();

  static inline const UpdateRoleResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateRoleResponse*>(
               &_UpdateRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateRoleResponse& a, UpdateRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRoleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRoleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRoleResponse* New() const final {
    return CreateMaybeMessage<UpdateRoleResponse>(nullptr);
  }

  UpdateRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRoleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRoleResponse& from);
  void MergeFrom(const UpdateRoleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateRoleResponse";
  }
  protected:
  explicit UpdateRoleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_2eproto);
    return ::descriptor_table_master_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UpdateRoleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_2eproto;
};
// -------------------------------------------------------------------

class GetVersionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetVersionRequest) */ {
 public:
  inline GetVersionRequest() : GetVersionRequest(nullptr) {}
  virtual ~GetVersionRequest();

  GetVersionRequest(const GetVersionRequest& from);
  GetVersionRequest(GetVersionRequest&& from) noexcept
    : GetVersionRequest() {
    *this = ::std::move(from);
  }

  inline GetVersionRequest& operator=(const GetVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionRequest& operator=(GetVersionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVersionRequest& default_instance();

  static inline const GetVersionRequest* internal_default_instance() {
    return reinterpret_cast<const GetVersionRequest*>(
               &_GetVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetVersionRequest& a, GetVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVersionRequest* New() const final {
    return CreateMaybeMessage<GetVersionRequest>(nullptr);
  }

  GetVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVersionRequest& from);
  void MergeFrom(const GetVersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetVersionRequest";
  }
  protected:
  explicit GetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_2eproto);
    return ::descriptor_table_master_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostsFieldNumber = 1,
  };
  // string hosts = 1;
  void clear_hosts();
  const std::string& hosts() const;
  void set_hosts(const std::string& value);
  void set_hosts(std::string&& value);
  void set_hosts(const char* value);
  void set_hosts(const char* value, size_t size);
  std::string* mutable_hosts();
  std::string* release_hosts();
  void set_allocated_hosts(std::string* hosts);
  private:
  const std::string& _internal_hosts() const;
  void _internal_set_hosts(const std::string& value);
  std::string* _internal_mutable_hosts();
  public:

  // @@protoc_insertion_point(class_scope:GetVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hosts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_2eproto;
};
// -------------------------------------------------------------------

class GetVersionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetVersionResponse) */ {
 public:
  inline GetVersionResponse() : GetVersionResponse(nullptr) {}
  virtual ~GetVersionResponse();

  GetVersionResponse(const GetVersionResponse& from);
  GetVersionResponse(GetVersionResponse&& from) noexcept
    : GetVersionResponse() {
    *this = ::std::move(from);
  }

  inline GetVersionResponse& operator=(const GetVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionResponse& operator=(GetVersionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVersionResponse& default_instance();

  static inline const GetVersionResponse* internal_default_instance() {
    return reinterpret_cast<const GetVersionResponse*>(
               &_GetVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetVersionResponse& a, GetVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVersionResponse* New() const final {
    return CreateMaybeMessage<GetVersionResponse>(nullptr);
  }

  GetVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVersionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVersionResponse& from);
  void MergeFrom(const GetVersionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetVersionResponse";
  }
  protected:
  explicit GetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_2eproto);
    return ::descriptor_table_master_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardListFieldNumber = 2,
    kVersionFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated int32 shard_list = 2;
  int shard_list_size() const;
  private:
  int _internal_shard_list_size() const;
  public:
  void clear_shard_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shard_list() const;
  void _internal_add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shard_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shard_list(int index) const;
  void set_shard_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shard_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shard_list();

  // repeated int32 version = 3;
  int version_size() const;
  private:
  int _internal_version_size() const;
  public:
  void clear_version();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_version() const;
  void _internal_add_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_version();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 version(int index) const;
  void set_version(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      version() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_version();

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shard_list_;
  mutable std::atomic<int> _shard_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > version_;
  mutable std::atomic<int> _version_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_2eproto;
};
// -------------------------------------------------------------------

class GetTopoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTopoRequest) */ {
 public:
  inline GetTopoRequest() : GetTopoRequest(nullptr) {}
  virtual ~GetTopoRequest();

  GetTopoRequest(const GetTopoRequest& from);
  GetTopoRequest(GetTopoRequest&& from) noexcept
    : GetTopoRequest() {
    *this = ::std::move(from);
  }

  inline GetTopoRequest& operator=(const GetTopoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTopoRequest& operator=(GetTopoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTopoRequest& default_instance();

  static inline const GetTopoRequest* internal_default_instance() {
    return reinterpret_cast<const GetTopoRequest*>(
               &_GetTopoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetTopoRequest& a, GetTopoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTopoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTopoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTopoRequest* New() const final {
    return CreateMaybeMessage<GetTopoRequest>(nullptr);
  }

  GetTopoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTopoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTopoRequest& from);
  void MergeFrom(const GetTopoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTopoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTopoRequest";
  }
  protected:
  explicit GetTopoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_2eproto);
    return ::descriptor_table_master_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardListFieldNumber = 2,
    kHostsFieldNumber = 1,
  };
  // repeated int32 shard_list = 2;
  int shard_list_size() const;
  private:
  int _internal_shard_list_size() const;
  public:
  void clear_shard_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shard_list() const;
  void _internal_add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shard_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shard_list(int index) const;
  void set_shard_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shard_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shard_list();

  // string hosts = 1;
  void clear_hosts();
  const std::string& hosts() const;
  void set_hosts(const std::string& value);
  void set_hosts(std::string&& value);
  void set_hosts(const char* value);
  void set_hosts(const char* value, size_t size);
  std::string* mutable_hosts();
  std::string* release_hosts();
  void set_allocated_hosts(std::string* hosts);
  private:
  const std::string& _internal_hosts() const;
  void _internal_set_hosts(const std::string& value);
  std::string* _internal_mutable_hosts();
  public:

  // @@protoc_insertion_point(class_scope:GetTopoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shard_list_;
  mutable std::atomic<int> _shard_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hosts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_2eproto;
};
// -------------------------------------------------------------------

class GetTopoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTopoResponse) */ {
 public:
  inline GetTopoResponse() : GetTopoResponse(nullptr) {}
  virtual ~GetTopoResponse();

  GetTopoResponse(const GetTopoResponse& from);
  GetTopoResponse(GetTopoResponse&& from) noexcept
    : GetTopoResponse() {
    *this = ::std::move(from);
  }

  inline GetTopoResponse& operator=(const GetTopoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTopoResponse& operator=(GetTopoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTopoResponse& default_instance();

  static inline const GetTopoResponse* internal_default_instance() {
    return reinterpret_cast<const GetTopoResponse*>(
               &_GetTopoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetTopoResponse& a, GetTopoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTopoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTopoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTopoResponse* New() const final {
    return CreateMaybeMessage<GetTopoResponse>(nullptr);
  }

  GetTopoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTopoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTopoResponse& from);
  void MergeFrom(const GetTopoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTopoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTopoResponse";
  }
  protected:
  explicit GetTopoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_2eproto);
    return ::descriptor_table_master_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardListFieldNumber = 2,
    kTopoFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // repeated int32 shard_list = 2;
  int shard_list_size() const;
  private:
  int _internal_shard_list_size() const;
  public:
  void clear_shard_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shard_list() const;
  void _internal_add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shard_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shard_list(int index) const;
  void set_shard_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shard_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shard_list();

  // repeated string topo = 3;
  int topo_size() const;
  private:
  int _internal_topo_size() const;
  public:
  void clear_topo();
  const std::string& topo(int index) const;
  std::string* mutable_topo(int index);
  void set_topo(int index, const std::string& value);
  void set_topo(int index, std::string&& value);
  void set_topo(int index, const char* value);
  void set_topo(int index, const char* value, size_t size);
  std::string* add_topo();
  void add_topo(const std::string& value);
  void add_topo(std::string&& value);
  void add_topo(const char* value);
  void add_topo(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topo();
  private:
  const std::string& _internal_topo(int index) const;
  std::string* _internal_add_topo();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetTopoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shard_list_;
  mutable std::atomic<int> _shard_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topo_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_2eproto;
};
// ===================================================================

class MasterService_Stub;

class MasterService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MasterService() {};
 public:
  virtual ~MasterService();

  typedef MasterService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void UpdateRole(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::UpdateRoleRequest* request,
                       ::UpdateRoleResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetVersion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GetVersionRequest* request,
                       ::GetVersionResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTopo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GetTopoRequest* request,
                       ::GetTopoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MasterService);
};

class MasterService_Stub : public MasterService {
 public:
  MasterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  MasterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~MasterService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements MasterService ------------------------------------------

  void UpdateRole(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::UpdateRoleRequest* request,
                       ::UpdateRoleResponse* response,
                       ::google::protobuf::Closure* done);
  void GetVersion(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GetVersionRequest* request,
                       ::GetVersionResponse* response,
                       ::google::protobuf::Closure* done);
  void GetTopo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GetTopoRequest* request,
                       ::GetTopoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MasterService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UpdateRoleRequest

// string hosts = 1;
inline void UpdateRoleRequest::clear_hosts() {
  hosts_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateRoleRequest::hosts() const {
  // @@protoc_insertion_point(field_get:UpdateRoleRequest.hosts)
  return _internal_hosts();
}
inline void UpdateRoleRequest::set_hosts(const std::string& value) {
  _internal_set_hosts(value);
  // @@protoc_insertion_point(field_set:UpdateRoleRequest.hosts)
}
inline std::string* UpdateRoleRequest::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable:UpdateRoleRequest.hosts)
  return _internal_mutable_hosts();
}
inline const std::string& UpdateRoleRequest::_internal_hosts() const {
  return hosts_.Get();
}
inline void UpdateRoleRequest::_internal_set_hosts(const std::string& value) {
  
  hosts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateRoleRequest::set_hosts(std::string&& value) {
  
  hosts_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateRoleRequest.hosts)
}
inline void UpdateRoleRequest::set_hosts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hosts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateRoleRequest.hosts)
}
inline void UpdateRoleRequest::set_hosts(const char* value,
    size_t size) {
  
  hosts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateRoleRequest.hosts)
}
inline std::string* UpdateRoleRequest::_internal_mutable_hosts() {
  
  return hosts_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateRoleRequest::release_hosts() {
  // @@protoc_insertion_point(field_release:UpdateRoleRequest.hosts)
  return hosts_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateRoleRequest::set_allocated_hosts(std::string* hosts) {
  if (hosts != nullptr) {
    
  } else {
    
  }
  hosts_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hosts,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateRoleRequest.hosts)
}

// repeated int32 shard_list = 2;
inline int UpdateRoleRequest::_internal_shard_list_size() const {
  return shard_list_.size();
}
inline int UpdateRoleRequest::shard_list_size() const {
  return _internal_shard_list_size();
}
inline void UpdateRoleRequest::clear_shard_list() {
  shard_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateRoleRequest::_internal_shard_list(int index) const {
  return shard_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateRoleRequest::shard_list(int index) const {
  // @@protoc_insertion_point(field_get:UpdateRoleRequest.shard_list)
  return _internal_shard_list(index);
}
inline void UpdateRoleRequest::set_shard_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shard_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:UpdateRoleRequest.shard_list)
}
inline void UpdateRoleRequest::_internal_add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shard_list_.Add(value);
}
inline void UpdateRoleRequest::add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shard_list(value);
  // @@protoc_insertion_point(field_add:UpdateRoleRequest.shard_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UpdateRoleRequest::_internal_shard_list() const {
  return shard_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UpdateRoleRequest::shard_list() const {
  // @@protoc_insertion_point(field_list:UpdateRoleRequest.shard_list)
  return _internal_shard_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UpdateRoleRequest::_internal_mutable_shard_list() {
  return &shard_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UpdateRoleRequest::mutable_shard_list() {
  // @@protoc_insertion_point(field_mutable_list:UpdateRoleRequest.shard_list)
  return _internal_mutable_shard_list();
}

// repeated int32 is_master = 3;
inline int UpdateRoleRequest::_internal_is_master_size() const {
  return is_master_.size();
}
inline int UpdateRoleRequest::is_master_size() const {
  return _internal_is_master_size();
}
inline void UpdateRoleRequest::clear_is_master() {
  is_master_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateRoleRequest::_internal_is_master(int index) const {
  return is_master_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateRoleRequest::is_master(int index) const {
  // @@protoc_insertion_point(field_get:UpdateRoleRequest.is_master)
  return _internal_is_master(index);
}
inline void UpdateRoleRequest::set_is_master(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  is_master_.Set(index, value);
  // @@protoc_insertion_point(field_set:UpdateRoleRequest.is_master)
}
inline void UpdateRoleRequest::_internal_add_is_master(::PROTOBUF_NAMESPACE_ID::int32 value) {
  is_master_.Add(value);
}
inline void UpdateRoleRequest::add_is_master(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_is_master(value);
  // @@protoc_insertion_point(field_add:UpdateRoleRequest.is_master)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UpdateRoleRequest::_internal_is_master() const {
  return is_master_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UpdateRoleRequest::is_master() const {
  // @@protoc_insertion_point(field_list:UpdateRoleRequest.is_master)
  return _internal_is_master();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UpdateRoleRequest::_internal_mutable_is_master() {
  return &is_master_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UpdateRoleRequest::mutable_is_master() {
  // @@protoc_insertion_point(field_mutable_list:UpdateRoleRequest.is_master)
  return _internal_mutable_is_master();
}

// -------------------------------------------------------------------

// UpdateRoleResponse

// int32 status = 1;
inline void UpdateRoleResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateRoleResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateRoleResponse::status() const {
  // @@protoc_insertion_point(field_get:UpdateRoleResponse.status)
  return _internal_status();
}
inline void UpdateRoleResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void UpdateRoleResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:UpdateRoleResponse.status)
}

// -------------------------------------------------------------------

// GetVersionRequest

// string hosts = 1;
inline void GetVersionRequest::clear_hosts() {
  hosts_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetVersionRequest::hosts() const {
  // @@protoc_insertion_point(field_get:GetVersionRequest.hosts)
  return _internal_hosts();
}
inline void GetVersionRequest::set_hosts(const std::string& value) {
  _internal_set_hosts(value);
  // @@protoc_insertion_point(field_set:GetVersionRequest.hosts)
}
inline std::string* GetVersionRequest::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable:GetVersionRequest.hosts)
  return _internal_mutable_hosts();
}
inline const std::string& GetVersionRequest::_internal_hosts() const {
  return hosts_.Get();
}
inline void GetVersionRequest::_internal_set_hosts(const std::string& value) {
  
  hosts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetVersionRequest::set_hosts(std::string&& value) {
  
  hosts_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetVersionRequest.hosts)
}
inline void GetVersionRequest::set_hosts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hosts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetVersionRequest.hosts)
}
inline void GetVersionRequest::set_hosts(const char* value,
    size_t size) {
  
  hosts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetVersionRequest.hosts)
}
inline std::string* GetVersionRequest::_internal_mutable_hosts() {
  
  return hosts_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetVersionRequest::release_hosts() {
  // @@protoc_insertion_point(field_release:GetVersionRequest.hosts)
  return hosts_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVersionRequest::set_allocated_hosts(std::string* hosts) {
  if (hosts != nullptr) {
    
  } else {
    
  }
  hosts_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hosts,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetVersionRequest.hosts)
}

// -------------------------------------------------------------------

// GetVersionResponse

// int32 status = 1;
inline void GetVersionResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVersionResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVersionResponse::status() const {
  // @@protoc_insertion_point(field_get:GetVersionResponse.status)
  return _internal_status();
}
inline void GetVersionResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void GetVersionResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GetVersionResponse.status)
}

// repeated int32 shard_list = 2;
inline int GetVersionResponse::_internal_shard_list_size() const {
  return shard_list_.size();
}
inline int GetVersionResponse::shard_list_size() const {
  return _internal_shard_list_size();
}
inline void GetVersionResponse::clear_shard_list() {
  shard_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVersionResponse::_internal_shard_list(int index) const {
  return shard_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVersionResponse::shard_list(int index) const {
  // @@protoc_insertion_point(field_get:GetVersionResponse.shard_list)
  return _internal_shard_list(index);
}
inline void GetVersionResponse::set_shard_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shard_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:GetVersionResponse.shard_list)
}
inline void GetVersionResponse::_internal_add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shard_list_.Add(value);
}
inline void GetVersionResponse::add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shard_list(value);
  // @@protoc_insertion_point(field_add:GetVersionResponse.shard_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetVersionResponse::_internal_shard_list() const {
  return shard_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetVersionResponse::shard_list() const {
  // @@protoc_insertion_point(field_list:GetVersionResponse.shard_list)
  return _internal_shard_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetVersionResponse::_internal_mutable_shard_list() {
  return &shard_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetVersionResponse::mutable_shard_list() {
  // @@protoc_insertion_point(field_mutable_list:GetVersionResponse.shard_list)
  return _internal_mutable_shard_list();
}

// repeated int32 version = 3;
inline int GetVersionResponse::_internal_version_size() const {
  return version_.size();
}
inline int GetVersionResponse::version_size() const {
  return _internal_version_size();
}
inline void GetVersionResponse::clear_version() {
  version_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVersionResponse::_internal_version(int index) const {
  return version_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVersionResponse::version(int index) const {
  // @@protoc_insertion_point(field_get:GetVersionResponse.version)
  return _internal_version(index);
}
inline void GetVersionResponse::set_version(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  version_.Set(index, value);
  // @@protoc_insertion_point(field_set:GetVersionResponse.version)
}
inline void GetVersionResponse::_internal_add_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  version_.Add(value);
}
inline void GetVersionResponse::add_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_version(value);
  // @@protoc_insertion_point(field_add:GetVersionResponse.version)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetVersionResponse::_internal_version() const {
  return version_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetVersionResponse::version() const {
  // @@protoc_insertion_point(field_list:GetVersionResponse.version)
  return _internal_version();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetVersionResponse::_internal_mutable_version() {
  return &version_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetVersionResponse::mutable_version() {
  // @@protoc_insertion_point(field_mutable_list:GetVersionResponse.version)
  return _internal_mutable_version();
}

// -------------------------------------------------------------------

// GetTopoRequest

// string hosts = 1;
inline void GetTopoRequest::clear_hosts() {
  hosts_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetTopoRequest::hosts() const {
  // @@protoc_insertion_point(field_get:GetTopoRequest.hosts)
  return _internal_hosts();
}
inline void GetTopoRequest::set_hosts(const std::string& value) {
  _internal_set_hosts(value);
  // @@protoc_insertion_point(field_set:GetTopoRequest.hosts)
}
inline std::string* GetTopoRequest::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable:GetTopoRequest.hosts)
  return _internal_mutable_hosts();
}
inline const std::string& GetTopoRequest::_internal_hosts() const {
  return hosts_.Get();
}
inline void GetTopoRequest::_internal_set_hosts(const std::string& value) {
  
  hosts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetTopoRequest::set_hosts(std::string&& value) {
  
  hosts_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetTopoRequest.hosts)
}
inline void GetTopoRequest::set_hosts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hosts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetTopoRequest.hosts)
}
inline void GetTopoRequest::set_hosts(const char* value,
    size_t size) {
  
  hosts_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetTopoRequest.hosts)
}
inline std::string* GetTopoRequest::_internal_mutable_hosts() {
  
  return hosts_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetTopoRequest::release_hosts() {
  // @@protoc_insertion_point(field_release:GetTopoRequest.hosts)
  return hosts_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTopoRequest::set_allocated_hosts(std::string* hosts) {
  if (hosts != nullptr) {
    
  } else {
    
  }
  hosts_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hosts,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetTopoRequest.hosts)
}

// repeated int32 shard_list = 2;
inline int GetTopoRequest::_internal_shard_list_size() const {
  return shard_list_.size();
}
inline int GetTopoRequest::shard_list_size() const {
  return _internal_shard_list_size();
}
inline void GetTopoRequest::clear_shard_list() {
  shard_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTopoRequest::_internal_shard_list(int index) const {
  return shard_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTopoRequest::shard_list(int index) const {
  // @@protoc_insertion_point(field_get:GetTopoRequest.shard_list)
  return _internal_shard_list(index);
}
inline void GetTopoRequest::set_shard_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shard_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:GetTopoRequest.shard_list)
}
inline void GetTopoRequest::_internal_add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shard_list_.Add(value);
}
inline void GetTopoRequest::add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shard_list(value);
  // @@protoc_insertion_point(field_add:GetTopoRequest.shard_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetTopoRequest::_internal_shard_list() const {
  return shard_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetTopoRequest::shard_list() const {
  // @@protoc_insertion_point(field_list:GetTopoRequest.shard_list)
  return _internal_shard_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetTopoRequest::_internal_mutable_shard_list() {
  return &shard_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetTopoRequest::mutable_shard_list() {
  // @@protoc_insertion_point(field_mutable_list:GetTopoRequest.shard_list)
  return _internal_mutable_shard_list();
}

// -------------------------------------------------------------------

// GetTopoResponse

// int32 status = 1;
inline void GetTopoResponse::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTopoResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTopoResponse::status() const {
  // @@protoc_insertion_point(field_get:GetTopoResponse.status)
  return _internal_status();
}
inline void GetTopoResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void GetTopoResponse::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GetTopoResponse.status)
}

// repeated int32 shard_list = 2;
inline int GetTopoResponse::_internal_shard_list_size() const {
  return shard_list_.size();
}
inline int GetTopoResponse::shard_list_size() const {
  return _internal_shard_list_size();
}
inline void GetTopoResponse::clear_shard_list() {
  shard_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTopoResponse::_internal_shard_list(int index) const {
  return shard_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTopoResponse::shard_list(int index) const {
  // @@protoc_insertion_point(field_get:GetTopoResponse.shard_list)
  return _internal_shard_list(index);
}
inline void GetTopoResponse::set_shard_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shard_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:GetTopoResponse.shard_list)
}
inline void GetTopoResponse::_internal_add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shard_list_.Add(value);
}
inline void GetTopoResponse::add_shard_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shard_list(value);
  // @@protoc_insertion_point(field_add:GetTopoResponse.shard_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetTopoResponse::_internal_shard_list() const {
  return shard_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetTopoResponse::shard_list() const {
  // @@protoc_insertion_point(field_list:GetTopoResponse.shard_list)
  return _internal_shard_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetTopoResponse::_internal_mutable_shard_list() {
  return &shard_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetTopoResponse::mutable_shard_list() {
  // @@protoc_insertion_point(field_mutable_list:GetTopoResponse.shard_list)
  return _internal_mutable_shard_list();
}

// repeated string topo = 3;
inline int GetTopoResponse::_internal_topo_size() const {
  return topo_.size();
}
inline int GetTopoResponse::topo_size() const {
  return _internal_topo_size();
}
inline void GetTopoResponse::clear_topo() {
  topo_.Clear();
}
inline std::string* GetTopoResponse::add_topo() {
  // @@protoc_insertion_point(field_add_mutable:GetTopoResponse.topo)
  return _internal_add_topo();
}
inline const std::string& GetTopoResponse::_internal_topo(int index) const {
  return topo_.Get(index);
}
inline const std::string& GetTopoResponse::topo(int index) const {
  // @@protoc_insertion_point(field_get:GetTopoResponse.topo)
  return _internal_topo(index);
}
inline std::string* GetTopoResponse::mutable_topo(int index) {
  // @@protoc_insertion_point(field_mutable:GetTopoResponse.topo)
  return topo_.Mutable(index);
}
inline void GetTopoResponse::set_topo(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:GetTopoResponse.topo)
  topo_.Mutable(index)->assign(value);
}
inline void GetTopoResponse::set_topo(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:GetTopoResponse.topo)
  topo_.Mutable(index)->assign(std::move(value));
}
inline void GetTopoResponse::set_topo(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetTopoResponse.topo)
}
inline void GetTopoResponse::set_topo(int index, const char* value, size_t size) {
  topo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetTopoResponse.topo)
}
inline std::string* GetTopoResponse::_internal_add_topo() {
  return topo_.Add();
}
inline void GetTopoResponse::add_topo(const std::string& value) {
  topo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetTopoResponse.topo)
}
inline void GetTopoResponse::add_topo(std::string&& value) {
  topo_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetTopoResponse.topo)
}
inline void GetTopoResponse::add_topo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetTopoResponse.topo)
}
inline void GetTopoResponse::add_topo(const char* value, size_t size) {
  topo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetTopoResponse.topo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTopoResponse::topo() const {
  // @@protoc_insertion_point(field_list:GetTopoResponse.topo)
  return topo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTopoResponse::mutable_topo() {
  // @@protoc_insertion_point(field_mutable_list:GetTopoResponse.topo)
  return &topo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_master_2eproto
